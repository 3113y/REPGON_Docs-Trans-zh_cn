"558bec83ec08f30f1005????????56578bf9f30f1145??8b0d":
__thiscall float Room::GetDevilRoomChance(Room* this<ecx>);

"558bec8b45??3dbf01000077??8b44":
__thiscall GridEntity* Room::GetGridEntity(Room* this<ecx>, uint32_t idx);

"558bec6aff68????????64a1????????5083ec7ca1????????33c58945??535657508d45??64a3????????8bd9":
__thiscall void Room::ShopRestockFull(Room* this<ecx>);

"558bec83ec1c53568bf1":
__thiscall void Room::ShopRestockPartial(Room* this<ecx>);

"558bec83ec30f30f7e05":
__thiscall int Room::GetShopItemPrice(Room* this<ecx>, unsigned int entVariant, unsigned int entSubType, int shopItemID);

"558bec53568b75??8bd95785f6":
__thiscall bool Room::SpawnGridEntity(Room *this<ecx>, int GridIndex, unsigned int Type, unsigned int Variant, unsigned int Seed, int VarData);

"558bec5153568b75??8bd95785f6":
__thiscall bool Room::SpawnGridEntity(Room *this<ecx>, int GridIndex, GridEntityDesc *Desc);

"558bec8b55??568bf181fabf010000":
__thiscall void Room::RemoveGridEntityImmediate(Room *this<ecx>, int GridIndex, int PathTrail, bool KeepDecoration);

"558bec83ec08538bd956578b3d":
__thiscall void Room::TriggerClear(Room *this<ecx>, bool playSound);

"558bec83e4f883ec5ca1????????33c4894424??8b45??894424??":
__thiscall bool Room::CanSpawnObstacleAtPosition(Room *this<ecx>, int GridIndex, bool Force);

struct Room depends (Camera, TemporaryEffects, ColorMod, Backdrop, KColor, Vector, EntityList)
{{
	inline Camera* GetCamera() { return *(Camera**)((char*)this + 0x11F8); }
	inline bool GetRedHeartDamage() {return *(bool*)((char*)this + 0x120C); }
	inline EntityList* GetEntityList() {return (EntityList*)((char*)this + 0x1218); }
	inline float* GetWaterAmount() {return (float*)((char*)this + 0x7134); }
	inline KColor* GetWaterColor() { return (KColor*)((char*)this + 0x7158 ); }
	inline KColor* GetWaterColorMultiplier() { return (KColor*)((char*)this + 0x7168 ); }
	
	// Initially, the base water color was erroneously defined as a Color and not a KColor occupying 0x7168. Color takes more bytes in memory.
	// Due to this, when setting the color, some arbitrary bytes ahead of the water color were being set.
	// While the true nature of these bytes aren't yet understood, the one at 0x7178 seems to control whether water color is rendered.
	inline int* GetUnknownWaterInt() { return (int*)((char*)this + 0x7178 ); }
	
	inline ColorMod* GetFloorColor() { return (ColorMod*)((char*)this + 0x7188 ); }
	inline TemporaryEffects* GetTemporaryEffects() {return (TemporaryEffects*)((char*)this + 0x71F4); }
    inline Backdrop* GetBackdrop() { return (Backdrop*)((char*)this + 0x1D34); }
	inline Vector* GetWaterCurrent() {return (Vector*)((char*)this + 0x7344); }

}};