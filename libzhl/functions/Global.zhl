/*
"\x55\x8B\xEC\x83\xE4\x00\x51\xA1\x00\x00\x00\x00\x53\x56\x57\x83",
	//mask
	"xxxxx?xx????xxxx",
*/

struct GlobalPre
{{
	#include <windows.h>
	//#include "rapidxml.hpp"
	#include <string>
	#include <vector>
	#include <set>
	#include <map>
	#include <functional>
	#include <deque>
	#include <cstdarg>
	#include <unordered_map>
	#include <cmath>
	#include <queue>
    #include <cstdint>
	#undef LoadImage

	#ifndef M_PI
		#define M_PI 3.14159265358979323846
	#endif
	
	extern "C"
	{
		#include "lstate.h"
	}

	/*struct CAchievement;
	struct RandomAmount;
	struct Point;
	
	typedef std::pair<int, int> std_pair_int_int;
	typedef std::pair<float, float> std_pair_float_float;
	typedef std::pair<std::string, int> std_pair_std_string_int;
	typedef std::pair<std::string, RandomAmount> std_pair_std_string_RandomAmount;
	typedef std::pair<std::string, std::string> std_pair_std_string_std_string;
	typedef std::pair<CAchievement*, Point> std_pair_CAchievement_ptr_Point;
	typedef std::map<std::string, std::string> std_map_std_string_std_string;
	typedef std::map<std::string, int> std_map_std_string_int;
	typedef std::map<std::string, bool> std_map_std_string_bool;
	*/

	
}};

//=================================================================================================================
// This block will be copied right afterwards, unless it "depends" on specific structures
// in which case these structures will be declared first
// This is useful if you have something like a 2D vector struct and want some predefined vectors for convenience purposes

// struct GlobalConst // comment this line out and uncomment the line below if this block requires specific structures (don't forget to replace the list of dependencies with your own)
struct GlobalConst
{{	

	enum WeaponType
	{
		WEAPON_NULL = 0x0,
		WEAPON_TEARS = 0x1,
		WEAPON_BRIMSTONE = 0x2,
		WEAPON_LASER = 0x3,
		WEAPON_KNIFE = 0x4,
		WEAPON_BOMBS = 0x5,
		WEAPON_ROCKETS = 0x6,
		WEAPON_MONSTROS_LUNGS = 0x7,
		WEAPON_LUDOVICO_TECHNIQUE = 0x8,
		WEAPON_TECH_X = 0x9,
		WEAPON_BONE = 0xA,
		WEAPON_NOTCHED_AXE = 0xB,
		WEAPON_URN_OF_SOULS = 0xC,
		WEAPON_SPIRIT_SWORD = 0xD,
		WEAPON_FETUS = 0xE,
 		WEAPON_UMBILICAL_WHIP = 0xF,
		NUM_WEAPON_TYPES = 0x10,
};

	static DWORD GetBaseAddress()
	{
		return (DWORD)GetModuleHandle(NULL);
	}
}};

struct GlobalPost
{{
}};

/*"558bec83e4?51a1????????53565783f801":
cleanup __cdecl void Kage_PrintLog(int flag, char* Format);
*/