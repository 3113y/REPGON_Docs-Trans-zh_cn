"558bec83e4c081ecb400000053568bf15780be????????000f84????????80be????????000f84????????f30f108e":
__thiscall void Entity_Tear::Render(Vector *offset);

"558bec6aff68????????64a1????????5081ec9c010000a1????????33c58945??5657508d45??64a3????????8bf1":
__thiscall bool Entity_Tear::HandleCollision(Entity* collider, bool low);

"558bec83e4f083ec1856":
__thiscall Entity_Tear* Entity_Tear::MakeMultidimensionalCopy(Entity * spawner);

"558bec83e4f883ec44a1????????33c4894424??f30f100d":
__thiscall void Entity_Tear::ResetSpriteScale();

"558bec6aff68????????64a1????????505156a1????????33c5508d45??64a3????????8bf18975??e8????????c745??00000000c706":
__thiscall void Entity_Tear::Constructor();

struct Entity_Tear depends (ANM2, BitSet128) : public Entity {
	__vtable {
		skip; // Free
		skip; // Init
		skip; // PreUpdate
		
		override
		"558bec6aff68????????64a1????????50b8d4260000":
		void Update();
		
		skip; // Interpolate
		skip; // Render
		skip; // RenderShadowLayer
		skip; // PostRender
		skip; // TakeDamage
		skip; // Kill
		skip; // Remove
		skip; // TriggerGlowingHourglass
		skip; // ???
		skip; // GetRenderZ
		skip; // CanOverwrite
		skip; // SetColor
		skip; // SetCollisionDamage
		skip; // ClearReferences
		skip; // CanShutDoors
		skip; // IsBoss
		skip; // IsValidTarget
		skip; // TryThrow
		skip; // GetForwardVector
		skip; // HandleCollision
		skip; // ResetColor
		skip; // LoadEntityConfig
	};
	
	BitSet128 _tearFlags : 0x428;
	int _scaleAnimNum : 0x45c;
	float _deadEyeIntensity : 0x464;
	bool _multidimensionalTouched : 0x468;
	bool _prismTouched : 0x469;
	ANM2 _tearHaloANM2 : 0x4ac;
	ANM2 _tearEffectANM2 : 0x5c0;
	ANM2 _deadEyeANM2 : 0x6d4;
} : 0x848;
