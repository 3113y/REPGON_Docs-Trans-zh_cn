"558bec83e4f8515356578bf98b57":
__thiscall void ANM2::Render(Vector* position,Vector* topleftclamp,Vector* bottomrightclamp);

"558bec83ec10568bf1578b7e":
__thiscall void ANM2::Update();

"558bec8379??0056":
__thiscall void ANM2::SetLayerFrame(int layerid,int frame);

"558bec8b45??568bf185c078":
__thiscall void ANM2::ReplaceSpritesheet(int LayerId, std_string &PngFilename);

"558bec6aff68????????64a1????????5083ec28535657a1????????33c5508d45??64a3????????8bf933c9":
__thiscall void ANM2::LoadGraphics(bool unk);

"558bec6aff68????????64a1????????505657a1????????33c5508d45??64a3????????8bf9837f??00":
__thiscall void ANM2::Reset();

"558bec51538b9980000000":
__thiscall LayerState* ANM2::GetLayer(const char* layerName);

"558bec5156578b7d??8bf1":
__thiscall LayerState* ANM2::GetLayer(int layer);

"558bec5153568bf15780be????????00":
__thiscall void ANM2::RenderLayer(int param_1,Vector *param_2,Vector *param_3,Vector *param_4);

"558bec8b41??85c074??8079??0074??8b4d??80390074??8378??1072??8b008a103a1175??84d274??8a50??3a51??75??83c00283c10284d275??33c0eb??1bc083c80185c075??b0015dc2040032c05dc20400??????????????????????":
__thiscall bool ANM2::IsPlaying(std_string* name);

"558bec518379??0075??83c8ff":
__thiscall int ANM2::GetFrame();

"558bec83ec08538bc18b4d??565733ff8945??8b58??85db74??8b40??8bf08945??837e??108bc672??8b060f1f40008a103a1175??84d274??8a50??3a51??75??83c00283c10284d275??33c0eb??1bc083c80185c074??8b4d??4781c63c0100003bfb72??5168????????6a00e8????????83c40c32c05f5e5b8be55dc208008b4d??69c73c01000083c130":
__thiscall void ANM2::SetAnimation(const char* anim, bool reset);

"558bec807d??0056578bf975??8b77??85f674??837e??108bc672??8b068b4d??8a103a1175??84d274??8a50??3a51??75??83c00283c10284d275??33c0eb??1bc083c80185c075??3846??74??3847??75??6a01ff75??8bcfe8????????84c074??8d4f??e8????????c647??015f5e5dc20800????????????????????":
__thiscall void ANM2::Play(const char* anim, bool reset);

"558bec83ec0880b9????????00":
__thiscall void ANM2::Render_Wrapper(Vector* Position, Vector* topleftclamp, Vector* bottomrightclamp);

struct ANM2 depends (AnimationState, ColorMod, KColor, LayerState, Vector) { {{
    inline AnimationState* GetAnimationState() { return &this->_animState; }
    inline AnimationState* GetOverlayAnimationState() { return &this->_overlayAnimState; }
    inline unsigned int GetAnimationCount() { return this->_animCount; }
    inline AnimationData* GetAnimationData(const int index) {
        if (this->_animData != nullptr && index >= 0 && index < this->_animCount) {
			return &this->_animData[index];
		}
		return nullptr;
    }
	inline NullFrame* GetNullFrame(const char * name) {return this->GetAnimationState()->GetNullFrame(name); }
	inline NullFrame* GetOverlayNullFrame(const char * name) {return this->GetOverlayAnimationState()->GetNullFrame(name); }
	inline unsigned int GetLayerCount() { return this->_layerCount; } 
	inline ColorMod* GetColor() { return &this->_color; } 
}} 
    std_string _filename;
    std_string _animDefaultName;
    AnimationState _animState;  // 0x30
    AnimationState _overlayAnimState;  // 0x50
    bool _overlayRenderFirst;
    char _pad0[3];
    AnimationData* _animData;
    int _animCount;
    LayerState* _layerState;
    unsigned int _layerCount;  // 0x80
    std_string* _nullLayerNames;
    unsigned int _numNullLayers;
    std_string* _eventNames;
    unsigned int _numEvents;
    Vector _offset;
    Vector _scale;
    float _rotation;
    ColorMod _color;  // 0xa8
    KColor _kColor;
    char _pad1[28];
    bool _flipX;
    bool _flipY;
    char _pad2[2];
    float _playbackSpeed;
    char _pad3[12];
};


"f30f100d(????????)f30f1005????????f30f590d????????8b07":
reference float g_WIDTH; //global width used in several anm2 position calculations

"f30f100d????????f30f1005(????????)f30f590d????????8b07":
reference float g_HEIGHT; //global height used in several anm2 position calculations

"f30f5905(????????)f30f59d0f30f1145??f30f58d3f30f1155??d945??dd1c24e8????????d95d??f30f1045??f30f5e45??f30f1145??f30f1045??f30f5945??f30f5805????????f30f1145??d945??dd1c24e8????????a1????????83c408":
reference float g_PointScale;

"f30f1005(????????)f30f118f????????f30f100d":
reference float g_DisplayPixelsPerPoint;