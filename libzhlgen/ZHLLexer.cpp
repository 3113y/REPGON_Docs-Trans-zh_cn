
// Generated from ZHLLexer.g4 by ANTLR 4.12.0


#include "ZHLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct ZHLLexerStaticData final {
  ZHLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ZHLLexerStaticData(const ZHLLexerStaticData&) = delete;
  ZHLLexerStaticData(ZHLLexerStaticData&&) = delete;
  ZHLLexerStaticData& operator=(const ZHLLexerStaticData&) = delete;
  ZHLLexerStaticData& operator=(ZHLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag zhllexerLexerOnceFlag;
ZHLLexerStaticData *zhllexerLexerStaticData = nullptr;

void zhllexerLexerInitialize() {
  assert(zhllexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<ZHLLexerStaticData>(
    std::vector<std::string>{
      "DoubleQuote", "Colon", "Semi", "Qualifier", "Cleanup", "Static", 
      "Virtual", "Declspec", "External", "LeftParen", "RightParen", "Comma", 
      "Star", "Lt", "Gt", "LeftRBracket", "RightRBracket", "LeftBracket", 
      "RightBracket", "Class", "Struct", "Reference", "Depends", "Typedef", 
      "Const", "CppRef", "Unsigned", "Signed", "Long", "Int", "Short", "Char", 
      "Bool", "Float", "Double", "Void", "Type", "Size", "Synonym", "Vtable", 
      "Skip", "Pure", "Override", "Visibility", "Public", "Private", "Protected", 
      "Register", "GeneralPurposeRegister", "Eax", "Ebx", "Ecx", "Edx", 
      "Esi", "Edi", "Esp", "Ebp", "SSERegister", "Xmm0", "Xmm1", "Xmm2", 
      "Xmm3", "Xmm4", "Xmm5", "Xmm6", "Xmm7", "CallingConvention", "Stdcall", 
      "Cdecl", "Fastcall", "Thiscall", "Signature", "ReferenceSignature", 
      "Operator", "OpSymbol", "Name", "Number", "HexNumber", "DecNumber", 
      "GenericCode", "Whitespace", "Newline", "BlockComment", "LineComment", 
      "Any"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\"'", "':'", "';'", "", "'cleanup'", "'static'", "'virtual'", 
      "'__declspec'", "'external'", "'('", "')'", "','", "'*'", "'<'", "'>'", 
      "'['", "']'", "'{'", "'}'", "'class'", "'struct'", "'reference'", 
      "'depends'", "'typedef'", "'const'", "'&'", "'unsigned'", "'signed'", 
      "'long'", "'int'", "'short'", "'char'", "'bool'", "'float'", "'double'", 
      "'void'", "'TypeInfo'", "'Size'", "'Synonym'", "'__vtable'", "'skip'", 
      "'pure'", "'override'", "", "'public'", "'private'", "'protected'", 
      "", "", "'eax'", "'ebx'", "'ecx'", "'edx'", "'esi'", "'edi'", "'esp'", 
      "'ebp'", "", "'xmm0'", "'xmm1'", "'xmm2'", "'xmm3'", "'xmm4'", "'xmm5'", 
      "'xmm6'", "'xmm7'", "", "'__stdcall'", "'__cdecl'", "'__fastcall'", 
      "'__thiscall'", "", "", "'operator'"
    },
    std::vector<std::string>{
      "", "DoubleQuote", "Colon", "Semi", "Qualifier", "Cleanup", "Static", 
      "Virtual", "Declspec", "External", "LeftParen", "RightParen", "Comma", 
      "Star", "Lt", "Gt", "LeftRBracket", "RightRBracket", "LeftBracket", 
      "RightBracket", "Class", "Struct", "Reference", "Depends", "Typedef", 
      "Const", "CppRef", "Unsigned", "Signed", "Long", "Int", "Short", "Char", 
      "Bool", "Float", "Double", "Void", "Type", "Size", "Synonym", "Vtable", 
      "Skip", "Pure", "Override", "Visibility", "Public", "Private", "Protected", 
      "Register", "GeneralPurposeRegister", "Eax", "Ebx", "Ecx", "Edx", 
      "Esi", "Edi", "Esp", "Ebp", "SSERegister", "Xmm0", "Xmm1", "Xmm2", 
      "Xmm3", "Xmm4", "Xmm5", "Xmm6", "Xmm7", "CallingConvention", "Stdcall", 
      "Cdecl", "Fastcall", "Thiscall", "Signature", "ReferenceSignature", 
      "Operator", "OpSymbol", "Name", "Number", "HexNumber", "DecNumber", 
      "GenericCode", "Whitespace", "Newline", "BlockComment", "LineComment", 
      "Any"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,85,695,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,3,3,182,8,3,1,4,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,
  	14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
  	21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
  	25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
  	27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,
  	30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,
  	33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,
  	35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,
  	37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,
  	39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,
  	41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,
  	43,3,43,406,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,
  	45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
  	46,1,47,1,47,3,47,435,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,
  	48,445,8,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,
  	51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,
  	55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
  	57,3,57,487,8,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,
  	60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,
  	62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,
  	65,1,65,1,66,1,66,1,66,1,66,3,66,533,8,66,1,67,1,67,1,67,1,67,1,67,1,
  	67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,
  	69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,
  	70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,3,71,577,8,71,1,71,4,71,580,
  	8,71,11,71,12,71,581,1,71,1,71,1,71,1,72,1,72,3,72,589,8,72,1,72,4,72,
  	592,8,72,11,72,12,72,593,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,
  	1,73,1,73,1,73,1,74,1,74,3,74,610,8,74,1,74,1,74,1,74,3,74,615,8,74,1,
  	75,1,75,5,75,619,8,75,10,75,12,75,622,9,75,1,76,1,76,3,76,626,8,76,1,
  	77,1,77,1,77,1,77,4,77,632,8,77,11,77,12,77,633,1,78,4,78,637,8,78,11,
  	78,12,78,638,1,79,1,79,1,79,1,79,5,79,645,8,79,10,79,12,79,648,9,79,1,
  	79,1,79,1,79,1,80,4,80,654,8,80,11,80,12,80,655,1,80,1,80,1,81,1,81,3,
  	81,662,8,81,1,81,3,81,665,8,81,1,81,1,81,1,82,1,82,1,82,1,82,5,82,673,
  	8,82,10,82,12,82,676,9,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,
  	5,83,687,8,83,10,83,12,83,690,9,83,1,83,1,83,1,84,1,84,2,646,674,0,85,
  	1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
  	29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
  	26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
  	75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
  	49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
  	59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,
  	69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,
  	79,159,80,161,81,163,82,165,83,167,84,169,85,1,0,9,4,0,48,57,63,63,65,
  	70,97,102,5,0,40,41,48,57,63,63,65,70,97,102,3,0,42,43,45,45,47,47,3,
  	0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,48,57,65,70,97,
  	102,1,0,48,57,2,0,9,9,32,32,2,0,10,10,13,13,734,0,1,1,0,0,0,0,3,1,0,0,
  	0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
  	1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
  	0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
  	0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
  	1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
  	0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
  	0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
  	1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,
  	0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
  	0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
  	0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,
  	0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,
  	0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,
  	0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,
  	0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,
  	0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,
  	1,171,1,0,0,0,3,173,1,0,0,0,5,175,1,0,0,0,7,181,1,0,0,0,9,183,1,0,0,0,
  	11,191,1,0,0,0,13,198,1,0,0,0,15,206,1,0,0,0,17,217,1,0,0,0,19,226,1,
  	0,0,0,21,228,1,0,0,0,23,230,1,0,0,0,25,232,1,0,0,0,27,234,1,0,0,0,29,
  	236,1,0,0,0,31,238,1,0,0,0,33,240,1,0,0,0,35,242,1,0,0,0,37,244,1,0,0,
  	0,39,246,1,0,0,0,41,252,1,0,0,0,43,259,1,0,0,0,45,269,1,0,0,0,47,277,
  	1,0,0,0,49,285,1,0,0,0,51,291,1,0,0,0,53,293,1,0,0,0,55,302,1,0,0,0,57,
  	309,1,0,0,0,59,314,1,0,0,0,61,318,1,0,0,0,63,324,1,0,0,0,65,329,1,0,0,
  	0,67,334,1,0,0,0,69,340,1,0,0,0,71,347,1,0,0,0,73,352,1,0,0,0,75,361,
  	1,0,0,0,77,366,1,0,0,0,79,374,1,0,0,0,81,383,1,0,0,0,83,388,1,0,0,0,85,
  	393,1,0,0,0,87,405,1,0,0,0,89,407,1,0,0,0,91,414,1,0,0,0,93,422,1,0,0,
  	0,95,434,1,0,0,0,97,444,1,0,0,0,99,446,1,0,0,0,101,450,1,0,0,0,103,454,
  	1,0,0,0,105,458,1,0,0,0,107,462,1,0,0,0,109,466,1,0,0,0,111,470,1,0,0,
  	0,113,474,1,0,0,0,115,486,1,0,0,0,117,488,1,0,0,0,119,493,1,0,0,0,121,
  	498,1,0,0,0,123,503,1,0,0,0,125,508,1,0,0,0,127,513,1,0,0,0,129,518,1,
  	0,0,0,131,523,1,0,0,0,133,532,1,0,0,0,135,534,1,0,0,0,137,544,1,0,0,0,
  	139,552,1,0,0,0,141,563,1,0,0,0,143,574,1,0,0,0,145,586,1,0,0,0,147,598,
  	1,0,0,0,149,614,1,0,0,0,151,616,1,0,0,0,153,625,1,0,0,0,155,627,1,0,0,
  	0,157,636,1,0,0,0,159,640,1,0,0,0,161,653,1,0,0,0,163,664,1,0,0,0,165,
  	668,1,0,0,0,167,682,1,0,0,0,169,693,1,0,0,0,171,172,5,34,0,0,172,2,1,
  	0,0,0,173,174,5,58,0,0,174,4,1,0,0,0,175,176,5,59,0,0,176,6,1,0,0,0,177,
  	182,3,9,4,0,178,182,3,11,5,0,179,182,3,13,6,0,180,182,3,15,7,0,181,177,
  	1,0,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,180,1,0,0,0,182,8,1,0,0,0,
  	183,184,5,99,0,0,184,185,5,108,0,0,185,186,5,101,0,0,186,187,5,97,0,0,
  	187,188,5,110,0,0,188,189,5,117,0,0,189,190,5,112,0,0,190,10,1,0,0,0,
  	191,192,5,115,0,0,192,193,5,116,0,0,193,194,5,97,0,0,194,195,5,116,0,
  	0,195,196,5,105,0,0,196,197,5,99,0,0,197,12,1,0,0,0,198,199,5,118,0,0,
  	199,200,5,105,0,0,200,201,5,114,0,0,201,202,5,116,0,0,202,203,5,117,0,
  	0,203,204,5,97,0,0,204,205,5,108,0,0,205,14,1,0,0,0,206,207,5,95,0,0,
  	207,208,5,95,0,0,208,209,5,100,0,0,209,210,5,101,0,0,210,211,5,99,0,0,
  	211,212,5,108,0,0,212,213,5,115,0,0,213,214,5,112,0,0,214,215,5,101,0,
  	0,215,216,5,99,0,0,216,16,1,0,0,0,217,218,5,101,0,0,218,219,5,120,0,0,
  	219,220,5,116,0,0,220,221,5,101,0,0,221,222,5,114,0,0,222,223,5,110,0,
  	0,223,224,5,97,0,0,224,225,5,108,0,0,225,18,1,0,0,0,226,227,5,40,0,0,
  	227,20,1,0,0,0,228,229,5,41,0,0,229,22,1,0,0,0,230,231,5,44,0,0,231,24,
  	1,0,0,0,232,233,5,42,0,0,233,26,1,0,0,0,234,235,5,60,0,0,235,28,1,0,0,
  	0,236,237,5,62,0,0,237,30,1,0,0,0,238,239,5,91,0,0,239,32,1,0,0,0,240,
  	241,5,93,0,0,241,34,1,0,0,0,242,243,5,123,0,0,243,36,1,0,0,0,244,245,
  	5,125,0,0,245,38,1,0,0,0,246,247,5,99,0,0,247,248,5,108,0,0,248,249,5,
  	97,0,0,249,250,5,115,0,0,250,251,5,115,0,0,251,40,1,0,0,0,252,253,5,115,
  	0,0,253,254,5,116,0,0,254,255,5,114,0,0,255,256,5,117,0,0,256,257,5,99,
  	0,0,257,258,5,116,0,0,258,42,1,0,0,0,259,260,5,114,0,0,260,261,5,101,
  	0,0,261,262,5,102,0,0,262,263,5,101,0,0,263,264,5,114,0,0,264,265,5,101,
  	0,0,265,266,5,110,0,0,266,267,5,99,0,0,267,268,5,101,0,0,268,44,1,0,0,
  	0,269,270,5,100,0,0,270,271,5,101,0,0,271,272,5,112,0,0,272,273,5,101,
  	0,0,273,274,5,110,0,0,274,275,5,100,0,0,275,276,5,115,0,0,276,46,1,0,
  	0,0,277,278,5,116,0,0,278,279,5,121,0,0,279,280,5,112,0,0,280,281,5,101,
  	0,0,281,282,5,100,0,0,282,283,5,101,0,0,283,284,5,102,0,0,284,48,1,0,
  	0,0,285,286,5,99,0,0,286,287,5,111,0,0,287,288,5,110,0,0,288,289,5,115,
  	0,0,289,290,5,116,0,0,290,50,1,0,0,0,291,292,5,38,0,0,292,52,1,0,0,0,
  	293,294,5,117,0,0,294,295,5,110,0,0,295,296,5,115,0,0,296,297,5,105,0,
  	0,297,298,5,103,0,0,298,299,5,110,0,0,299,300,5,101,0,0,300,301,5,100,
  	0,0,301,54,1,0,0,0,302,303,5,115,0,0,303,304,5,105,0,0,304,305,5,103,
  	0,0,305,306,5,110,0,0,306,307,5,101,0,0,307,308,5,100,0,0,308,56,1,0,
  	0,0,309,310,5,108,0,0,310,311,5,111,0,0,311,312,5,110,0,0,312,313,5,103,
  	0,0,313,58,1,0,0,0,314,315,5,105,0,0,315,316,5,110,0,0,316,317,5,116,
  	0,0,317,60,1,0,0,0,318,319,5,115,0,0,319,320,5,104,0,0,320,321,5,111,
  	0,0,321,322,5,114,0,0,322,323,5,116,0,0,323,62,1,0,0,0,324,325,5,99,0,
  	0,325,326,5,104,0,0,326,327,5,97,0,0,327,328,5,114,0,0,328,64,1,0,0,0,
  	329,330,5,98,0,0,330,331,5,111,0,0,331,332,5,111,0,0,332,333,5,108,0,
  	0,333,66,1,0,0,0,334,335,5,102,0,0,335,336,5,108,0,0,336,337,5,111,0,
  	0,337,338,5,97,0,0,338,339,5,116,0,0,339,68,1,0,0,0,340,341,5,100,0,0,
  	341,342,5,111,0,0,342,343,5,117,0,0,343,344,5,98,0,0,344,345,5,108,0,
  	0,345,346,5,101,0,0,346,70,1,0,0,0,347,348,5,118,0,0,348,349,5,111,0,
  	0,349,350,5,105,0,0,350,351,5,100,0,0,351,72,1,0,0,0,352,353,5,84,0,0,
  	353,354,5,121,0,0,354,355,5,112,0,0,355,356,5,101,0,0,356,357,5,73,0,
  	0,357,358,5,110,0,0,358,359,5,102,0,0,359,360,5,111,0,0,360,74,1,0,0,
  	0,361,362,5,83,0,0,362,363,5,105,0,0,363,364,5,122,0,0,364,365,5,101,
  	0,0,365,76,1,0,0,0,366,367,5,83,0,0,367,368,5,121,0,0,368,369,5,110,0,
  	0,369,370,5,111,0,0,370,371,5,110,0,0,371,372,5,121,0,0,372,373,5,109,
  	0,0,373,78,1,0,0,0,374,375,5,95,0,0,375,376,5,95,0,0,376,377,5,118,0,
  	0,377,378,5,116,0,0,378,379,5,97,0,0,379,380,5,98,0,0,380,381,5,108,0,
  	0,381,382,5,101,0,0,382,80,1,0,0,0,383,384,5,115,0,0,384,385,5,107,0,
  	0,385,386,5,105,0,0,386,387,5,112,0,0,387,82,1,0,0,0,388,389,5,112,0,
  	0,389,390,5,117,0,0,390,391,5,114,0,0,391,392,5,101,0,0,392,84,1,0,0,
  	0,393,394,5,111,0,0,394,395,5,118,0,0,395,396,5,101,0,0,396,397,5,114,
  	0,0,397,398,5,114,0,0,398,399,5,105,0,0,399,400,5,100,0,0,400,401,5,101,
  	0,0,401,86,1,0,0,0,402,406,3,89,44,0,403,406,3,91,45,0,404,406,3,93,46,
  	0,405,402,1,0,0,0,405,403,1,0,0,0,405,404,1,0,0,0,406,88,1,0,0,0,407,
  	408,5,112,0,0,408,409,5,117,0,0,409,410,5,98,0,0,410,411,5,108,0,0,411,
  	412,5,105,0,0,412,413,5,99,0,0,413,90,1,0,0,0,414,415,5,112,0,0,415,416,
  	5,114,0,0,416,417,5,105,0,0,417,418,5,118,0,0,418,419,5,97,0,0,419,420,
  	5,116,0,0,420,421,5,101,0,0,421,92,1,0,0,0,422,423,5,112,0,0,423,424,
  	5,114,0,0,424,425,5,111,0,0,425,426,5,116,0,0,426,427,5,101,0,0,427,428,
  	5,99,0,0,428,429,5,116,0,0,429,430,5,101,0,0,430,431,5,100,0,0,431,94,
  	1,0,0,0,432,435,3,97,48,0,433,435,3,115,57,0,434,432,1,0,0,0,434,433,
  	1,0,0,0,435,96,1,0,0,0,436,445,3,99,49,0,437,445,3,101,50,0,438,445,3,
  	103,51,0,439,445,3,105,52,0,440,445,3,107,53,0,441,445,3,109,54,0,442,
  	445,3,111,55,0,443,445,3,113,56,0,444,436,1,0,0,0,444,437,1,0,0,0,444,
  	438,1,0,0,0,444,439,1,0,0,0,444,440,1,0,0,0,444,441,1,0,0,0,444,442,1,
  	0,0,0,444,443,1,0,0,0,445,98,1,0,0,0,446,447,5,101,0,0,447,448,5,97,0,
  	0,448,449,5,120,0,0,449,100,1,0,0,0,450,451,5,101,0,0,451,452,5,98,0,
  	0,452,453,5,120,0,0,453,102,1,0,0,0,454,455,5,101,0,0,455,456,5,99,0,
  	0,456,457,5,120,0,0,457,104,1,0,0,0,458,459,5,101,0,0,459,460,5,100,0,
  	0,460,461,5,120,0,0,461,106,1,0,0,0,462,463,5,101,0,0,463,464,5,115,0,
  	0,464,465,5,105,0,0,465,108,1,0,0,0,466,467,5,101,0,0,467,468,5,100,0,
  	0,468,469,5,105,0,0,469,110,1,0,0,0,470,471,5,101,0,0,471,472,5,115,0,
  	0,472,473,5,112,0,0,473,112,1,0,0,0,474,475,5,101,0,0,475,476,5,98,0,
  	0,476,477,5,112,0,0,477,114,1,0,0,0,478,487,3,117,58,0,479,487,3,119,
  	59,0,480,487,3,121,60,0,481,487,3,123,61,0,482,487,3,125,62,0,483,487,
  	3,127,63,0,484,487,3,129,64,0,485,487,3,131,65,0,486,478,1,0,0,0,486,
  	479,1,0,0,0,486,480,1,0,0,0,486,481,1,0,0,0,486,482,1,0,0,0,486,483,1,
  	0,0,0,486,484,1,0,0,0,486,485,1,0,0,0,487,116,1,0,0,0,488,489,5,120,0,
  	0,489,490,5,109,0,0,490,491,5,109,0,0,491,492,5,48,0,0,492,118,1,0,0,
  	0,493,494,5,120,0,0,494,495,5,109,0,0,495,496,5,109,0,0,496,497,5,49,
  	0,0,497,120,1,0,0,0,498,499,5,120,0,0,499,500,5,109,0,0,500,501,5,109,
  	0,0,501,502,5,50,0,0,502,122,1,0,0,0,503,504,5,120,0,0,504,505,5,109,
  	0,0,505,506,5,109,0,0,506,507,5,51,0,0,507,124,1,0,0,0,508,509,5,120,
  	0,0,509,510,5,109,0,0,510,511,5,109,0,0,511,512,5,52,0,0,512,126,1,0,
  	0,0,513,514,5,120,0,0,514,515,5,109,0,0,515,516,5,109,0,0,516,517,5,53,
  	0,0,517,128,1,0,0,0,518,519,5,120,0,0,519,520,5,109,0,0,520,521,5,109,
  	0,0,521,522,5,54,0,0,522,130,1,0,0,0,523,524,5,120,0,0,524,525,5,109,
  	0,0,525,526,5,109,0,0,526,527,5,55,0,0,527,132,1,0,0,0,528,533,3,135,
  	67,0,529,533,3,137,68,0,530,533,3,139,69,0,531,533,3,141,70,0,532,528,
  	1,0,0,0,532,529,1,0,0,0,532,530,1,0,0,0,532,531,1,0,0,0,533,134,1,0,0,
  	0,534,535,5,95,0,0,535,536,5,95,0,0,536,537,5,115,0,0,537,538,5,116,0,
  	0,538,539,5,100,0,0,539,540,5,99,0,0,540,541,5,97,0,0,541,542,5,108,0,
  	0,542,543,5,108,0,0,543,136,1,0,0,0,544,545,5,95,0,0,545,546,5,95,0,0,
  	546,547,5,99,0,0,547,548,5,100,0,0,548,549,5,101,0,0,549,550,5,99,0,0,
  	550,551,5,108,0,0,551,138,1,0,0,0,552,553,5,95,0,0,553,554,5,95,0,0,554,
  	555,5,102,0,0,555,556,5,97,0,0,556,557,5,115,0,0,557,558,5,116,0,0,558,
  	559,5,99,0,0,559,560,5,97,0,0,560,561,5,108,0,0,561,562,5,108,0,0,562,
  	140,1,0,0,0,563,564,5,95,0,0,564,565,5,95,0,0,565,566,5,116,0,0,566,567,
  	5,104,0,0,567,568,5,105,0,0,568,569,5,115,0,0,569,570,5,99,0,0,570,571,
  	5,97,0,0,571,572,5,108,0,0,572,573,5,108,0,0,573,142,1,0,0,0,574,576,
  	3,1,0,0,575,577,5,46,0,0,576,575,1,0,0,0,576,577,1,0,0,0,577,579,1,0,
  	0,0,578,580,7,0,0,0,579,578,1,0,0,0,580,581,1,0,0,0,581,579,1,0,0,0,581,
  	582,1,0,0,0,582,583,1,0,0,0,583,584,3,1,0,0,584,585,3,3,1,0,585,144,1,
  	0,0,0,586,588,3,1,0,0,587,589,5,46,0,0,588,587,1,0,0,0,588,589,1,0,0,
  	0,589,591,1,0,0,0,590,592,7,1,0,0,591,590,1,0,0,0,592,593,1,0,0,0,593,
  	591,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,596,3,1,0,0,596,597,3,
  	3,1,0,597,146,1,0,0,0,598,599,5,111,0,0,599,600,5,112,0,0,600,601,5,101,
  	0,0,601,602,5,114,0,0,602,603,5,97,0,0,603,604,5,116,0,0,604,605,5,111,
  	0,0,605,606,5,114,0,0,606,148,1,0,0,0,607,609,7,2,0,0,608,610,5,61,0,
  	0,609,608,1,0,0,0,609,610,1,0,0,0,610,615,1,0,0,0,611,612,5,61,0,0,612,
  	615,5,61,0,0,613,615,5,61,0,0,614,607,1,0,0,0,614,611,1,0,0,0,614,613,
  	1,0,0,0,615,150,1,0,0,0,616,620,7,3,0,0,617,619,7,4,0,0,618,617,1,0,0,
  	0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,152,1,0,0,0,622,
  	620,1,0,0,0,623,626,3,155,77,0,624,626,3,157,78,0,625,623,1,0,0,0,625,
  	624,1,0,0,0,626,154,1,0,0,0,627,628,5,48,0,0,628,629,5,120,0,0,629,631,
  	1,0,0,0,630,632,7,5,0,0,631,630,1,0,0,0,632,633,1,0,0,0,633,631,1,0,0,
  	0,633,634,1,0,0,0,634,156,1,0,0,0,635,637,7,6,0,0,636,635,1,0,0,0,637,
  	638,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,158,1,0,0,0,640,641,5,
  	123,0,0,641,642,5,123,0,0,642,646,1,0,0,0,643,645,9,0,0,0,644,643,1,0,
  	0,0,645,648,1,0,0,0,646,647,1,0,0,0,646,644,1,0,0,0,647,649,1,0,0,0,648,
  	646,1,0,0,0,649,650,5,125,0,0,650,651,5,125,0,0,651,160,1,0,0,0,652,654,
  	7,7,0,0,653,652,1,0,0,0,654,655,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,
  	0,656,657,1,0,0,0,657,658,6,80,0,0,658,162,1,0,0,0,659,661,5,13,0,0,660,
  	662,5,10,0,0,661,660,1,0,0,0,661,662,1,0,0,0,662,665,1,0,0,0,663,665,
  	5,10,0,0,664,659,1,0,0,0,664,663,1,0,0,0,665,666,1,0,0,0,666,667,6,81,
  	0,0,667,164,1,0,0,0,668,669,5,47,0,0,669,670,5,42,0,0,670,674,1,0,0,0,
  	671,673,9,0,0,0,672,671,1,0,0,0,673,676,1,0,0,0,674,675,1,0,0,0,674,672,
  	1,0,0,0,675,677,1,0,0,0,676,674,1,0,0,0,677,678,5,42,0,0,678,679,5,47,
  	0,0,679,680,1,0,0,0,680,681,6,82,0,0,681,166,1,0,0,0,682,683,5,47,0,0,
  	683,684,5,47,0,0,684,688,1,0,0,0,685,687,8,8,0,0,686,685,1,0,0,0,687,
  	690,1,0,0,0,688,686,1,0,0,0,688,689,1,0,0,0,689,691,1,0,0,0,690,688,1,
  	0,0,0,691,692,6,83,0,0,692,168,1,0,0,0,693,694,9,0,0,0,694,170,1,0,0,
  	0,23,0,181,405,434,444,486,532,576,581,588,593,609,614,620,625,633,638,
  	646,655,661,664,674,688,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  zhllexerLexerStaticData = staticData.release();
}

}

ZHLLexer::ZHLLexer(CharStream *input) : Lexer(input) {
  ZHLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *zhllexerLexerStaticData->atn, zhllexerLexerStaticData->decisionToDFA, zhllexerLexerStaticData->sharedContextCache);
}

ZHLLexer::~ZHLLexer() {
  delete _interpreter;
}

std::string ZHLLexer::getGrammarFileName() const {
  return "ZHLLexer.g4";
}

const std::vector<std::string>& ZHLLexer::getRuleNames() const {
  return zhllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& ZHLLexer::getChannelNames() const {
  return zhllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& ZHLLexer::getModeNames() const {
  return zhllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& ZHLLexer::getVocabulary() const {
  return zhllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ZHLLexer::getSerializedATN() const {
  return zhllexerLexerStaticData->serializedATN;
}

const atn::ATN& ZHLLexer::getATN() const {
  return *zhllexerLexerStaticData->atn;
}




void ZHLLexer::initialize() {
  ::antlr4::internal::call_once(zhllexerLexerOnceFlag, zhllexerLexerInitialize);
}
