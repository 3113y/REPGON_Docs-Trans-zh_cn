
// Generated from ZHLLexer.g4 by ANTLR 4.12.0


#include "ZHLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct ZHLLexerStaticData final {
  ZHLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ZHLLexerStaticData(const ZHLLexerStaticData&) = delete;
  ZHLLexerStaticData(ZHLLexerStaticData&&) = delete;
  ZHLLexerStaticData& operator=(const ZHLLexerStaticData&) = delete;
  ZHLLexerStaticData& operator=(ZHLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag zhllexerLexerOnceFlag;
ZHLLexerStaticData *zhllexerLexerStaticData = nullptr;

void zhllexerLexerInitialize() {
  assert(zhllexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<ZHLLexerStaticData>(
    std::vector<std::string>{
      "DoubleQuote", "Colon", "Semi", "Cleanup", "Static", "Virtual", "Declspec", 
      "LeftParen", "RightParen", "Comma", "Ptr", "Lt", "Rt", "LeftRBracket", 
      "RightRBracket", "LeftBracket", "RightBracket", "Class", "Struct", 
      "Reference", "Depends", "Register", "GeneralPurposeRegister", "Eax", 
      "Ebx", "Ecx", "Edx", "Esi", "Edi", "Esp", "Ebp", "SSERegister", "Xmm0", 
      "Xmm1", "Xmm2", "Xmm3", "Xmm4", "Xmm5", "Xmm6", "Xmm7", "Qualifier", 
      "Signature", "ReferenceSignature", "Name", "GenericCode", "HexNumber", 
      "DecNumber", "Number", "Whitespace", "Newline", "BlockComment", "LineComment", 
      "Any"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\"'", "':'", "';'", "'cleanup'", "'static'", "'virtual'", "'__declspec'", 
      "'('", "')'", "','", "'*'", "'<'", "'>'", "'['", "']'", "'{'", "'}'", 
      "'class'", "'struct'", "'reference'", "'depends'", "", "", "'eax'", 
      "'ebx'", "'ecx'", "'edx'", "'esi'", "'edi'", "'esp'", "'ebp'", "", 
      "'xmm0'", "'xmm1'", "'xmm2'", "'xmm3'", "'xmm4'", "'xmm5'", "'xmm6'", 
      "'xmm7'"
    },
    std::vector<std::string>{
      "", "DoubleQuote", "Colon", "Semi", "Cleanup", "Static", "Virtual", 
      "Declspec", "LeftParen", "RightParen", "Comma", "Ptr", "Lt", "Rt", 
      "LeftRBracket", "RightRBracket", "LeftBracket", "RightBracket", "Class", 
      "Struct", "Reference", "Depends", "Register", "GeneralPurposeRegister", 
      "Eax", "Ebx", "Ecx", "Edx", "Esi", "Edi", "Esp", "Ebp", "SSERegister", 
      "Xmm0", "Xmm1", "Xmm2", "Xmm3", "Xmm4", "Xmm5", "Xmm6", "Xmm7", "Qualifier", 
      "Signature", "ReferenceSignature", "Name", "GenericCode", "Number", 
      "Whitespace", "Newline", "BlockComment", "LineComment", "Any"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,51,403,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
  	3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,
  	8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
  	1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,21,1,21,3,21,201,8,21,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,22,3,22,211,8,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
  	1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
  	1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,3,31,253,8,31,1,32,1,32,1,32,1,32,1,32,1,33,
  	1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,
  	1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
  	1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,299,8,40,1,41,
  	1,41,3,41,303,8,41,1,41,4,41,306,8,41,11,41,12,41,307,1,41,1,41,1,41,
  	1,42,1,42,3,42,315,8,42,1,42,4,42,318,8,42,11,42,12,42,319,1,42,1,42,
  	1,42,1,43,4,43,326,8,43,11,43,12,43,327,1,44,1,44,1,44,1,44,1,44,5,44,
  	335,8,44,10,44,12,44,338,9,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,
  	4,45,348,8,45,11,45,12,45,349,1,46,4,46,353,8,46,11,46,12,46,354,1,47,
  	1,47,3,47,359,8,47,1,48,4,48,362,8,48,11,48,12,48,363,1,48,1,48,1,49,
  	1,49,3,49,370,8,49,1,49,3,49,373,8,49,1,49,1,49,1,50,1,50,1,50,1,50,5,
  	50,381,8,50,10,50,12,50,384,9,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,
  	51,1,51,5,51,395,8,51,10,51,12,51,398,9,51,1,51,1,51,1,52,1,52,1,382,
  	0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
  	27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
  	25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
  	73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,0,93,0,95,46,
  	97,47,99,48,101,49,103,50,105,51,1,0,7,2,0,48,57,97,102,3,0,40,41,48,
  	57,97,102,4,0,48,57,65,90,95,95,97,122,3,0,48,57,65,70,97,102,1,0,48,
  	57,2,0,9,9,32,32,2,0,10,10,13,13,432,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
  	0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
  	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
  	0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
  	0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
  	49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
  	0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
  	0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
  	81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,95,1,
  	0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
  	0,0,1,107,1,0,0,0,3,109,1,0,0,0,5,111,1,0,0,0,7,113,1,0,0,0,9,121,1,0,
  	0,0,11,128,1,0,0,0,13,136,1,0,0,0,15,147,1,0,0,0,17,149,1,0,0,0,19,151,
  	1,0,0,0,21,153,1,0,0,0,23,155,1,0,0,0,25,157,1,0,0,0,27,159,1,0,0,0,29,
  	161,1,0,0,0,31,163,1,0,0,0,33,165,1,0,0,0,35,167,1,0,0,0,37,173,1,0,0,
  	0,39,180,1,0,0,0,41,190,1,0,0,0,43,200,1,0,0,0,45,210,1,0,0,0,47,212,
  	1,0,0,0,49,216,1,0,0,0,51,220,1,0,0,0,53,224,1,0,0,0,55,228,1,0,0,0,57,
  	232,1,0,0,0,59,236,1,0,0,0,61,240,1,0,0,0,63,252,1,0,0,0,65,254,1,0,0,
  	0,67,259,1,0,0,0,69,264,1,0,0,0,71,269,1,0,0,0,73,274,1,0,0,0,75,279,
  	1,0,0,0,77,284,1,0,0,0,79,289,1,0,0,0,81,298,1,0,0,0,83,300,1,0,0,0,85,
  	312,1,0,0,0,87,325,1,0,0,0,89,329,1,0,0,0,91,343,1,0,0,0,93,352,1,0,0,
  	0,95,358,1,0,0,0,97,361,1,0,0,0,99,372,1,0,0,0,101,376,1,0,0,0,103,390,
  	1,0,0,0,105,401,1,0,0,0,107,108,5,34,0,0,108,2,1,0,0,0,109,110,5,58,0,
  	0,110,4,1,0,0,0,111,112,5,59,0,0,112,6,1,0,0,0,113,114,5,99,0,0,114,115,
  	5,108,0,0,115,116,5,101,0,0,116,117,5,97,0,0,117,118,5,110,0,0,118,119,
  	5,117,0,0,119,120,5,112,0,0,120,8,1,0,0,0,121,122,5,115,0,0,122,123,5,
  	116,0,0,123,124,5,97,0,0,124,125,5,116,0,0,125,126,5,105,0,0,126,127,
  	5,99,0,0,127,10,1,0,0,0,128,129,5,118,0,0,129,130,5,105,0,0,130,131,5,
  	114,0,0,131,132,5,116,0,0,132,133,5,117,0,0,133,134,5,97,0,0,134,135,
  	5,108,0,0,135,12,1,0,0,0,136,137,5,95,0,0,137,138,5,95,0,0,138,139,5,
  	100,0,0,139,140,5,101,0,0,140,141,5,99,0,0,141,142,5,108,0,0,142,143,
  	5,115,0,0,143,144,5,112,0,0,144,145,5,101,0,0,145,146,5,99,0,0,146,14,
  	1,0,0,0,147,148,5,40,0,0,148,16,1,0,0,0,149,150,5,41,0,0,150,18,1,0,0,
  	0,151,152,5,44,0,0,152,20,1,0,0,0,153,154,5,42,0,0,154,22,1,0,0,0,155,
  	156,5,60,0,0,156,24,1,0,0,0,157,158,5,62,0,0,158,26,1,0,0,0,159,160,5,
  	91,0,0,160,28,1,0,0,0,161,162,5,93,0,0,162,30,1,0,0,0,163,164,5,123,0,
  	0,164,32,1,0,0,0,165,166,5,125,0,0,166,34,1,0,0,0,167,168,5,99,0,0,168,
  	169,5,108,0,0,169,170,5,97,0,0,170,171,5,115,0,0,171,172,5,115,0,0,172,
  	36,1,0,0,0,173,174,5,115,0,0,174,175,5,116,0,0,175,176,5,114,0,0,176,
  	177,5,117,0,0,177,178,5,99,0,0,178,179,5,116,0,0,179,38,1,0,0,0,180,181,
  	5,114,0,0,181,182,5,101,0,0,182,183,5,102,0,0,183,184,5,101,0,0,184,185,
  	5,114,0,0,185,186,5,101,0,0,186,187,5,110,0,0,187,188,5,99,0,0,188,189,
  	5,101,0,0,189,40,1,0,0,0,190,191,5,100,0,0,191,192,5,101,0,0,192,193,
  	5,112,0,0,193,194,5,101,0,0,194,195,5,110,0,0,195,196,5,100,0,0,196,197,
  	5,115,0,0,197,42,1,0,0,0,198,201,3,45,22,0,199,201,3,63,31,0,200,198,
  	1,0,0,0,200,199,1,0,0,0,201,44,1,0,0,0,202,211,3,47,23,0,203,211,3,49,
  	24,0,204,211,3,51,25,0,205,211,3,53,26,0,206,211,3,55,27,0,207,211,3,
  	57,28,0,208,211,3,59,29,0,209,211,3,61,30,0,210,202,1,0,0,0,210,203,1,
  	0,0,0,210,204,1,0,0,0,210,205,1,0,0,0,210,206,1,0,0,0,210,207,1,0,0,0,
  	210,208,1,0,0,0,210,209,1,0,0,0,211,46,1,0,0,0,212,213,5,101,0,0,213,
  	214,5,97,0,0,214,215,5,120,0,0,215,48,1,0,0,0,216,217,5,101,0,0,217,218,
  	5,98,0,0,218,219,5,120,0,0,219,50,1,0,0,0,220,221,5,101,0,0,221,222,5,
  	99,0,0,222,223,5,120,0,0,223,52,1,0,0,0,224,225,5,101,0,0,225,226,5,100,
  	0,0,226,227,5,120,0,0,227,54,1,0,0,0,228,229,5,101,0,0,229,230,5,115,
  	0,0,230,231,5,105,0,0,231,56,1,0,0,0,232,233,5,101,0,0,233,234,5,100,
  	0,0,234,235,5,105,0,0,235,58,1,0,0,0,236,237,5,101,0,0,237,238,5,115,
  	0,0,238,239,5,112,0,0,239,60,1,0,0,0,240,241,5,101,0,0,241,242,5,98,0,
  	0,242,243,5,112,0,0,243,62,1,0,0,0,244,253,3,65,32,0,245,253,3,67,33,
  	0,246,253,3,69,34,0,247,253,3,71,35,0,248,253,3,73,36,0,249,253,3,75,
  	37,0,250,253,3,77,38,0,251,253,3,79,39,0,252,244,1,0,0,0,252,245,1,0,
  	0,0,252,246,1,0,0,0,252,247,1,0,0,0,252,248,1,0,0,0,252,249,1,0,0,0,252,
  	250,1,0,0,0,252,251,1,0,0,0,253,64,1,0,0,0,254,255,5,120,0,0,255,256,
  	5,109,0,0,256,257,5,109,0,0,257,258,5,48,0,0,258,66,1,0,0,0,259,260,5,
  	120,0,0,260,261,5,109,0,0,261,262,5,109,0,0,262,263,5,49,0,0,263,68,1,
  	0,0,0,264,265,5,120,0,0,265,266,5,109,0,0,266,267,5,109,0,0,267,268,5,
  	50,0,0,268,70,1,0,0,0,269,270,5,120,0,0,270,271,5,109,0,0,271,272,5,109,
  	0,0,272,273,5,51,0,0,273,72,1,0,0,0,274,275,5,120,0,0,275,276,5,109,0,
  	0,276,277,5,109,0,0,277,278,5,52,0,0,278,74,1,0,0,0,279,280,5,120,0,0,
  	280,281,5,109,0,0,281,282,5,109,0,0,282,283,5,53,0,0,283,76,1,0,0,0,284,
  	285,5,120,0,0,285,286,5,109,0,0,286,287,5,109,0,0,287,288,5,54,0,0,288,
  	78,1,0,0,0,289,290,5,120,0,0,290,291,5,109,0,0,291,292,5,109,0,0,292,
  	293,5,55,0,0,293,80,1,0,0,0,294,299,3,7,3,0,295,299,3,9,4,0,296,299,3,
  	11,5,0,297,299,3,13,6,0,298,294,1,0,0,0,298,295,1,0,0,0,298,296,1,0,0,
  	0,298,297,1,0,0,0,299,82,1,0,0,0,300,302,3,1,0,0,301,303,5,46,0,0,302,
  	301,1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,306,7,0,0,0,305,304,1,
  	0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,
  	309,310,3,1,0,0,310,311,3,3,1,0,311,84,1,0,0,0,312,314,3,1,0,0,313,315,
  	5,46,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,318,7,1,
  	0,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,
  	321,1,0,0,0,321,322,3,1,0,0,322,323,3,3,1,0,323,86,1,0,0,0,324,326,7,
  	2,0,0,325,324,1,0,0,0,326,327,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,
  	328,88,1,0,0,0,329,330,5,60,0,0,330,331,5,60,0,0,331,332,5,60,0,0,332,
  	336,1,0,0,0,333,335,9,0,0,0,334,333,1,0,0,0,335,338,1,0,0,0,336,334,1,
  	0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,336,1,0,0,0,339,340,5,62,0,
  	0,340,341,5,62,0,0,341,342,5,62,0,0,342,90,1,0,0,0,343,344,5,48,0,0,344,
  	345,5,120,0,0,345,347,1,0,0,0,346,348,7,3,0,0,347,346,1,0,0,0,348,349,
  	1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,92,1,0,0,0,351,353,7,4,0,
  	0,352,351,1,0,0,0,353,354,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,
  	94,1,0,0,0,356,359,3,91,45,0,357,359,3,93,46,0,358,356,1,0,0,0,358,357,
  	1,0,0,0,359,96,1,0,0,0,360,362,7,5,0,0,361,360,1,0,0,0,362,363,1,0,0,
  	0,363,361,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,6,48,0,0,366,
  	98,1,0,0,0,367,369,5,13,0,0,368,370,5,10,0,0,369,368,1,0,0,0,369,370,
  	1,0,0,0,370,373,1,0,0,0,371,373,5,10,0,0,372,367,1,0,0,0,372,371,1,0,
  	0,0,373,374,1,0,0,0,374,375,6,49,0,0,375,100,1,0,0,0,376,377,5,47,0,0,
  	377,378,5,42,0,0,378,382,1,0,0,0,379,381,9,0,0,0,380,379,1,0,0,0,381,
  	384,1,0,0,0,382,383,1,0,0,0,382,380,1,0,0,0,383,385,1,0,0,0,384,382,1,
  	0,0,0,385,386,5,42,0,0,386,387,5,47,0,0,387,388,1,0,0,0,388,389,6,50,
  	0,0,389,102,1,0,0,0,390,391,5,47,0,0,391,392,5,47,0,0,392,396,1,0,0,0,
  	393,395,8,6,0,0,394,393,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,
  	1,0,0,0,397,399,1,0,0,0,398,396,1,0,0,0,399,400,6,51,0,0,400,104,1,0,
  	0,0,401,402,9,0,0,0,402,106,1,0,0,0,19,0,200,210,252,298,302,307,314,
  	319,327,336,349,354,358,363,369,372,382,396,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  zhllexerLexerStaticData = staticData.release();
}

}

ZHLLexer::ZHLLexer(CharStream *input) : Lexer(input) {
  ZHLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *zhllexerLexerStaticData->atn, zhllexerLexerStaticData->decisionToDFA, zhllexerLexerStaticData->sharedContextCache);
}

ZHLLexer::~ZHLLexer() {
  delete _interpreter;
}

std::string ZHLLexer::getGrammarFileName() const {
  return "ZHLLexer.g4";
}

const std::vector<std::string>& ZHLLexer::getRuleNames() const {
  return zhllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& ZHLLexer::getChannelNames() const {
  return zhllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& ZHLLexer::getModeNames() const {
  return zhllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& ZHLLexer::getVocabulary() const {
  return zhllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ZHLLexer::getSerializedATN() const {
  return zhllexerLexerStaticData->serializedATN;
}

const atn::ATN& ZHLLexer::getATN() const {
  return *zhllexerLexerStaticData->atn;
}




void ZHLLexer::initialize() {
  ::antlr4::internal::call_once(zhllexerLexerOnceFlag, zhllexerLexerInitialize);
}
