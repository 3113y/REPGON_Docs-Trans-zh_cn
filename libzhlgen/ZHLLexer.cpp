
// Generated from ZHLLexer.g4 by ANTLR 4.12.0


#include "ZHLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct ZHLLexerStaticData final {
  ZHLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ZHLLexerStaticData(const ZHLLexerStaticData&) = delete;
  ZHLLexerStaticData(ZHLLexerStaticData&&) = delete;
  ZHLLexerStaticData& operator=(const ZHLLexerStaticData&) = delete;
  ZHLLexerStaticData& operator=(ZHLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag zhllexerLexerOnceFlag;
ZHLLexerStaticData *zhllexerLexerStaticData = nullptr;

void zhllexerLexerInitialize() {
  assert(zhllexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<ZHLLexerStaticData>(
    std::vector<std::string>{
      "DoubleQuote", "Colon", "Semi", "Qualifier", "Cleanup", "Static", 
      "Virtual", "Declspec", "External", "LeftParen", "RightParen", "Comma", 
      "Star", "Lt", "Gt", "LeftRBracket", "RightRBracket", "LeftBracket", 
      "RightBracket", "Class", "Struct", "Reference", "Depends", "Typedef", 
      "Const", "CppRef", "Unsigned", "Signed", "Long", "Int", "Short", "Char", 
      "Bool", "Float", "Double", "Void", "Type", "Size", "Synonym", "Vtable", 
      "Skip", "Override", "Visibility", "Public", "Private", "Protected", 
      "Register", "GeneralPurposeRegister", "Eax", "Ebx", "Ecx", "Edx", 
      "Esi", "Edi", "Esp", "Ebp", "SSERegister", "Xmm0", "Xmm1", "Xmm2", 
      "Xmm3", "Xmm4", "Xmm5", "Xmm6", "Xmm7", "CallingConvention", "Stdcall", 
      "Cdecl", "Fastcall", "Thiscall", "Signature", "ReferenceSignature", 
      "Name", "Number", "HexNumber", "DecNumber", "GenericCode", "Whitespace", 
      "Newline", "BlockComment", "LineComment", "Any"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\"'", "':'", "';'", "", "'cleanup'", "'static'", "'virtual'", 
      "'__declspec'", "'external'", "'('", "')'", "','", "'*'", "'<'", "'>'", 
      "'['", "']'", "'{'", "'}'", "'class'", "'struct'", "'reference'", 
      "'depends'", "'typedef'", "'const'", "'&'", "'unsigned'", "'signed'", 
      "'long'", "'int'", "'short'", "'char'", "'bool'", "'float'", "'double'", 
      "'void'", "'TypeInfo'", "'Size'", "'Synonym'", "'__vtable'", "'skip'", 
      "'override'", "", "'public'", "'private'", "'protected'", "", "", 
      "'eax'", "'ebx'", "'ecx'", "'edx'", "'esi'", "'edi'", "'esp'", "'ebp'", 
      "", "'xmm0'", "'xmm1'", "'xmm2'", "'xmm3'", "'xmm4'", "'xmm5'", "'xmm6'", 
      "'xmm7'", "", "'__stdcall'", "'__cdecl'", "'__fastcall'", "'__thiscall'"
    },
    std::vector<std::string>{
      "", "DoubleQuote", "Colon", "Semi", "Qualifier", "Cleanup", "Static", 
      "Virtual", "Declspec", "External", "LeftParen", "RightParen", "Comma", 
      "Star", "Lt", "Gt", "LeftRBracket", "RightRBracket", "LeftBracket", 
      "RightBracket", "Class", "Struct", "Reference", "Depends", "Typedef", 
      "Const", "CppRef", "Unsigned", "Signed", "Long", "Int", "Short", "Char", 
      "Bool", "Float", "Double", "Void", "Type", "Size", "Synonym", "Vtable", 
      "Skip", "Override", "Visibility", "Public", "Private", "Protected", 
      "Register", "GeneralPurposeRegister", "Eax", "Ebx", "Ecx", "Edx", 
      "Esi", "Edi", "Esp", "Ebp", "SSERegister", "Xmm0", "Xmm1", "Xmm2", 
      "Xmm3", "Xmm4", "Xmm5", "Xmm6", "Xmm7", "CallingConvention", "Stdcall", 
      "Cdecl", "Fastcall", "Thiscall", "Signature", "ReferenceSignature", 
      "Name", "Number", "HexNumber", "DecNumber", "GenericCode", "Whitespace", 
      "Newline", "BlockComment", "LineComment", "Any"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,82,666,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,1,1,1,1,1,2,1,2,
  	1,3,1,3,1,3,1,3,3,3,176,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
  	5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
  	10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
  	17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
  	20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,
  	22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
  	28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
  	31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
  	39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
  	41,1,42,1,42,1,42,3,42,395,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
  	44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,
  	45,1,45,1,45,1,45,1,46,1,46,3,46,424,8,46,1,47,1,47,1,47,1,47,1,47,1,
  	47,1,47,1,47,3,47,434,8,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,
  	50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,
  	53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,3,56,476,8,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,
  	58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,
  	61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,
  	64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,3,65,522,8,65,1,66,1,66,1,
  	66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,
  	67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,
  	69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,3,70,566,8,
  	70,1,70,4,70,569,8,70,11,70,12,70,570,1,70,1,70,1,70,1,71,1,71,3,71,578,
  	8,71,1,71,4,71,581,8,71,11,71,12,71,582,1,71,1,71,1,71,1,72,1,72,5,72,
  	590,8,72,10,72,12,72,593,9,72,1,73,1,73,3,73,597,8,73,1,74,1,74,1,74,
  	1,74,4,74,603,8,74,11,74,12,74,604,1,75,4,75,608,8,75,11,75,12,75,609,
  	1,76,1,76,1,76,1,76,5,76,616,8,76,10,76,12,76,619,9,76,1,76,1,76,1,76,
  	1,77,4,77,625,8,77,11,77,12,77,626,1,77,1,77,1,78,1,78,3,78,633,8,78,
  	1,78,3,78,636,8,78,1,78,1,78,1,79,1,79,1,79,1,79,5,79,644,8,79,10,79,
  	12,79,647,9,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,5,80,658,
  	8,80,10,80,12,80,661,9,80,1,80,1,80,1,81,1,81,2,617,645,0,82,1,1,3,2,
  	5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
  	39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
  	101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
  	121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,
  	141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,
  	161,81,163,82,1,0,8,4,0,48,57,63,63,65,70,97,102,5,0,40,41,48,57,63,63,
  	65,70,97,102,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,
  	48,57,65,70,97,102,1,0,48,57,2,0,9,9,32,32,2,0,10,10,13,13,702,0,1,1,
  	0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
  	13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
  	0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
  	0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
  	45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
  	0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
  	0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
  	77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
  	0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
  	0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,
  	0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,
  	0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,
  	0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,
  	0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,
  	0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,
  	0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,1,165,1,0,0,0,3,167,1,0,0,
  	0,5,169,1,0,0,0,7,175,1,0,0,0,9,177,1,0,0,0,11,185,1,0,0,0,13,192,1,0,
  	0,0,15,200,1,0,0,0,17,211,1,0,0,0,19,220,1,0,0,0,21,222,1,0,0,0,23,224,
  	1,0,0,0,25,226,1,0,0,0,27,228,1,0,0,0,29,230,1,0,0,0,31,232,1,0,0,0,33,
  	234,1,0,0,0,35,236,1,0,0,0,37,238,1,0,0,0,39,240,1,0,0,0,41,246,1,0,0,
  	0,43,253,1,0,0,0,45,263,1,0,0,0,47,271,1,0,0,0,49,279,1,0,0,0,51,285,
  	1,0,0,0,53,287,1,0,0,0,55,296,1,0,0,0,57,303,1,0,0,0,59,308,1,0,0,0,61,
  	312,1,0,0,0,63,318,1,0,0,0,65,323,1,0,0,0,67,328,1,0,0,0,69,334,1,0,0,
  	0,71,341,1,0,0,0,73,346,1,0,0,0,75,355,1,0,0,0,77,360,1,0,0,0,79,368,
  	1,0,0,0,81,377,1,0,0,0,83,382,1,0,0,0,85,394,1,0,0,0,87,396,1,0,0,0,89,
  	403,1,0,0,0,91,411,1,0,0,0,93,423,1,0,0,0,95,433,1,0,0,0,97,435,1,0,0,
  	0,99,439,1,0,0,0,101,443,1,0,0,0,103,447,1,0,0,0,105,451,1,0,0,0,107,
  	455,1,0,0,0,109,459,1,0,0,0,111,463,1,0,0,0,113,475,1,0,0,0,115,477,1,
  	0,0,0,117,482,1,0,0,0,119,487,1,0,0,0,121,492,1,0,0,0,123,497,1,0,0,0,
  	125,502,1,0,0,0,127,507,1,0,0,0,129,512,1,0,0,0,131,521,1,0,0,0,133,523,
  	1,0,0,0,135,533,1,0,0,0,137,541,1,0,0,0,139,552,1,0,0,0,141,563,1,0,0,
  	0,143,575,1,0,0,0,145,587,1,0,0,0,147,596,1,0,0,0,149,598,1,0,0,0,151,
  	607,1,0,0,0,153,611,1,0,0,0,155,624,1,0,0,0,157,635,1,0,0,0,159,639,1,
  	0,0,0,161,653,1,0,0,0,163,664,1,0,0,0,165,166,5,34,0,0,166,2,1,0,0,0,
  	167,168,5,58,0,0,168,4,1,0,0,0,169,170,5,59,0,0,170,6,1,0,0,0,171,176,
  	3,9,4,0,172,176,3,11,5,0,173,176,3,13,6,0,174,176,3,15,7,0,175,171,1,
  	0,0,0,175,172,1,0,0,0,175,173,1,0,0,0,175,174,1,0,0,0,176,8,1,0,0,0,177,
  	178,5,99,0,0,178,179,5,108,0,0,179,180,5,101,0,0,180,181,5,97,0,0,181,
  	182,5,110,0,0,182,183,5,117,0,0,183,184,5,112,0,0,184,10,1,0,0,0,185,
  	186,5,115,0,0,186,187,5,116,0,0,187,188,5,97,0,0,188,189,5,116,0,0,189,
  	190,5,105,0,0,190,191,5,99,0,0,191,12,1,0,0,0,192,193,5,118,0,0,193,194,
  	5,105,0,0,194,195,5,114,0,0,195,196,5,116,0,0,196,197,5,117,0,0,197,198,
  	5,97,0,0,198,199,5,108,0,0,199,14,1,0,0,0,200,201,5,95,0,0,201,202,5,
  	95,0,0,202,203,5,100,0,0,203,204,5,101,0,0,204,205,5,99,0,0,205,206,5,
  	108,0,0,206,207,5,115,0,0,207,208,5,112,0,0,208,209,5,101,0,0,209,210,
  	5,99,0,0,210,16,1,0,0,0,211,212,5,101,0,0,212,213,5,120,0,0,213,214,5,
  	116,0,0,214,215,5,101,0,0,215,216,5,114,0,0,216,217,5,110,0,0,217,218,
  	5,97,0,0,218,219,5,108,0,0,219,18,1,0,0,0,220,221,5,40,0,0,221,20,1,0,
  	0,0,222,223,5,41,0,0,223,22,1,0,0,0,224,225,5,44,0,0,225,24,1,0,0,0,226,
  	227,5,42,0,0,227,26,1,0,0,0,228,229,5,60,0,0,229,28,1,0,0,0,230,231,5,
  	62,0,0,231,30,1,0,0,0,232,233,5,91,0,0,233,32,1,0,0,0,234,235,5,93,0,
  	0,235,34,1,0,0,0,236,237,5,123,0,0,237,36,1,0,0,0,238,239,5,125,0,0,239,
  	38,1,0,0,0,240,241,5,99,0,0,241,242,5,108,0,0,242,243,5,97,0,0,243,244,
  	5,115,0,0,244,245,5,115,0,0,245,40,1,0,0,0,246,247,5,115,0,0,247,248,
  	5,116,0,0,248,249,5,114,0,0,249,250,5,117,0,0,250,251,5,99,0,0,251,252,
  	5,116,0,0,252,42,1,0,0,0,253,254,5,114,0,0,254,255,5,101,0,0,255,256,
  	5,102,0,0,256,257,5,101,0,0,257,258,5,114,0,0,258,259,5,101,0,0,259,260,
  	5,110,0,0,260,261,5,99,0,0,261,262,5,101,0,0,262,44,1,0,0,0,263,264,5,
  	100,0,0,264,265,5,101,0,0,265,266,5,112,0,0,266,267,5,101,0,0,267,268,
  	5,110,0,0,268,269,5,100,0,0,269,270,5,115,0,0,270,46,1,0,0,0,271,272,
  	5,116,0,0,272,273,5,121,0,0,273,274,5,112,0,0,274,275,5,101,0,0,275,276,
  	5,100,0,0,276,277,5,101,0,0,277,278,5,102,0,0,278,48,1,0,0,0,279,280,
  	5,99,0,0,280,281,5,111,0,0,281,282,5,110,0,0,282,283,5,115,0,0,283,284,
  	5,116,0,0,284,50,1,0,0,0,285,286,5,38,0,0,286,52,1,0,0,0,287,288,5,117,
  	0,0,288,289,5,110,0,0,289,290,5,115,0,0,290,291,5,105,0,0,291,292,5,103,
  	0,0,292,293,5,110,0,0,293,294,5,101,0,0,294,295,5,100,0,0,295,54,1,0,
  	0,0,296,297,5,115,0,0,297,298,5,105,0,0,298,299,5,103,0,0,299,300,5,110,
  	0,0,300,301,5,101,0,0,301,302,5,100,0,0,302,56,1,0,0,0,303,304,5,108,
  	0,0,304,305,5,111,0,0,305,306,5,110,0,0,306,307,5,103,0,0,307,58,1,0,
  	0,0,308,309,5,105,0,0,309,310,5,110,0,0,310,311,5,116,0,0,311,60,1,0,
  	0,0,312,313,5,115,0,0,313,314,5,104,0,0,314,315,5,111,0,0,315,316,5,114,
  	0,0,316,317,5,116,0,0,317,62,1,0,0,0,318,319,5,99,0,0,319,320,5,104,0,
  	0,320,321,5,97,0,0,321,322,5,114,0,0,322,64,1,0,0,0,323,324,5,98,0,0,
  	324,325,5,111,0,0,325,326,5,111,0,0,326,327,5,108,0,0,327,66,1,0,0,0,
  	328,329,5,102,0,0,329,330,5,108,0,0,330,331,5,111,0,0,331,332,5,97,0,
  	0,332,333,5,116,0,0,333,68,1,0,0,0,334,335,5,100,0,0,335,336,5,111,0,
  	0,336,337,5,117,0,0,337,338,5,98,0,0,338,339,5,108,0,0,339,340,5,101,
  	0,0,340,70,1,0,0,0,341,342,5,118,0,0,342,343,5,111,0,0,343,344,5,105,
  	0,0,344,345,5,100,0,0,345,72,1,0,0,0,346,347,5,84,0,0,347,348,5,121,0,
  	0,348,349,5,112,0,0,349,350,5,101,0,0,350,351,5,73,0,0,351,352,5,110,
  	0,0,352,353,5,102,0,0,353,354,5,111,0,0,354,74,1,0,0,0,355,356,5,83,0,
  	0,356,357,5,105,0,0,357,358,5,122,0,0,358,359,5,101,0,0,359,76,1,0,0,
  	0,360,361,5,83,0,0,361,362,5,121,0,0,362,363,5,110,0,0,363,364,5,111,
  	0,0,364,365,5,110,0,0,365,366,5,121,0,0,366,367,5,109,0,0,367,78,1,0,
  	0,0,368,369,5,95,0,0,369,370,5,95,0,0,370,371,5,118,0,0,371,372,5,116,
  	0,0,372,373,5,97,0,0,373,374,5,98,0,0,374,375,5,108,0,0,375,376,5,101,
  	0,0,376,80,1,0,0,0,377,378,5,115,0,0,378,379,5,107,0,0,379,380,5,105,
  	0,0,380,381,5,112,0,0,381,82,1,0,0,0,382,383,5,111,0,0,383,384,5,118,
  	0,0,384,385,5,101,0,0,385,386,5,114,0,0,386,387,5,114,0,0,387,388,5,105,
  	0,0,388,389,5,100,0,0,389,390,5,101,0,0,390,84,1,0,0,0,391,395,3,87,43,
  	0,392,395,3,89,44,0,393,395,3,91,45,0,394,391,1,0,0,0,394,392,1,0,0,0,
  	394,393,1,0,0,0,395,86,1,0,0,0,396,397,5,112,0,0,397,398,5,117,0,0,398,
  	399,5,98,0,0,399,400,5,108,0,0,400,401,5,105,0,0,401,402,5,99,0,0,402,
  	88,1,0,0,0,403,404,5,112,0,0,404,405,5,114,0,0,405,406,5,105,0,0,406,
  	407,5,118,0,0,407,408,5,97,0,0,408,409,5,116,0,0,409,410,5,101,0,0,410,
  	90,1,0,0,0,411,412,5,112,0,0,412,413,5,114,0,0,413,414,5,111,0,0,414,
  	415,5,116,0,0,415,416,5,101,0,0,416,417,5,99,0,0,417,418,5,116,0,0,418,
  	419,5,101,0,0,419,420,5,100,0,0,420,92,1,0,0,0,421,424,3,95,47,0,422,
  	424,3,113,56,0,423,421,1,0,0,0,423,422,1,0,0,0,424,94,1,0,0,0,425,434,
  	3,97,48,0,426,434,3,99,49,0,427,434,3,101,50,0,428,434,3,103,51,0,429,
  	434,3,105,52,0,430,434,3,107,53,0,431,434,3,109,54,0,432,434,3,111,55,
  	0,433,425,1,0,0,0,433,426,1,0,0,0,433,427,1,0,0,0,433,428,1,0,0,0,433,
  	429,1,0,0,0,433,430,1,0,0,0,433,431,1,0,0,0,433,432,1,0,0,0,434,96,1,
  	0,0,0,435,436,5,101,0,0,436,437,5,97,0,0,437,438,5,120,0,0,438,98,1,0,
  	0,0,439,440,5,101,0,0,440,441,5,98,0,0,441,442,5,120,0,0,442,100,1,0,
  	0,0,443,444,5,101,0,0,444,445,5,99,0,0,445,446,5,120,0,0,446,102,1,0,
  	0,0,447,448,5,101,0,0,448,449,5,100,0,0,449,450,5,120,0,0,450,104,1,0,
  	0,0,451,452,5,101,0,0,452,453,5,115,0,0,453,454,5,105,0,0,454,106,1,0,
  	0,0,455,456,5,101,0,0,456,457,5,100,0,0,457,458,5,105,0,0,458,108,1,0,
  	0,0,459,460,5,101,0,0,460,461,5,115,0,0,461,462,5,112,0,0,462,110,1,0,
  	0,0,463,464,5,101,0,0,464,465,5,98,0,0,465,466,5,112,0,0,466,112,1,0,
  	0,0,467,476,3,115,57,0,468,476,3,117,58,0,469,476,3,119,59,0,470,476,
  	3,121,60,0,471,476,3,123,61,0,472,476,3,125,62,0,473,476,3,127,63,0,474,
  	476,3,129,64,0,475,467,1,0,0,0,475,468,1,0,0,0,475,469,1,0,0,0,475,470,
  	1,0,0,0,475,471,1,0,0,0,475,472,1,0,0,0,475,473,1,0,0,0,475,474,1,0,0,
  	0,476,114,1,0,0,0,477,478,5,120,0,0,478,479,5,109,0,0,479,480,5,109,0,
  	0,480,481,5,48,0,0,481,116,1,0,0,0,482,483,5,120,0,0,483,484,5,109,0,
  	0,484,485,5,109,0,0,485,486,5,49,0,0,486,118,1,0,0,0,487,488,5,120,0,
  	0,488,489,5,109,0,0,489,490,5,109,0,0,490,491,5,50,0,0,491,120,1,0,0,
  	0,492,493,5,120,0,0,493,494,5,109,0,0,494,495,5,109,0,0,495,496,5,51,
  	0,0,496,122,1,0,0,0,497,498,5,120,0,0,498,499,5,109,0,0,499,500,5,109,
  	0,0,500,501,5,52,0,0,501,124,1,0,0,0,502,503,5,120,0,0,503,504,5,109,
  	0,0,504,505,5,109,0,0,505,506,5,53,0,0,506,126,1,0,0,0,507,508,5,120,
  	0,0,508,509,5,109,0,0,509,510,5,109,0,0,510,511,5,54,0,0,511,128,1,0,
  	0,0,512,513,5,120,0,0,513,514,5,109,0,0,514,515,5,109,0,0,515,516,5,55,
  	0,0,516,130,1,0,0,0,517,522,3,133,66,0,518,522,3,135,67,0,519,522,3,137,
  	68,0,520,522,3,139,69,0,521,517,1,0,0,0,521,518,1,0,0,0,521,519,1,0,0,
  	0,521,520,1,0,0,0,522,132,1,0,0,0,523,524,5,95,0,0,524,525,5,95,0,0,525,
  	526,5,115,0,0,526,527,5,116,0,0,527,528,5,100,0,0,528,529,5,99,0,0,529,
  	530,5,97,0,0,530,531,5,108,0,0,531,532,5,108,0,0,532,134,1,0,0,0,533,
  	534,5,95,0,0,534,535,5,95,0,0,535,536,5,99,0,0,536,537,5,100,0,0,537,
  	538,5,101,0,0,538,539,5,99,0,0,539,540,5,108,0,0,540,136,1,0,0,0,541,
  	542,5,95,0,0,542,543,5,95,0,0,543,544,5,102,0,0,544,545,5,97,0,0,545,
  	546,5,115,0,0,546,547,5,116,0,0,547,548,5,99,0,0,548,549,5,97,0,0,549,
  	550,5,108,0,0,550,551,5,108,0,0,551,138,1,0,0,0,552,553,5,95,0,0,553,
  	554,5,95,0,0,554,555,5,116,0,0,555,556,5,104,0,0,556,557,5,105,0,0,557,
  	558,5,115,0,0,558,559,5,99,0,0,559,560,5,97,0,0,560,561,5,108,0,0,561,
  	562,5,108,0,0,562,140,1,0,0,0,563,565,3,1,0,0,564,566,5,46,0,0,565,564,
  	1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,569,7,0,0,0,568,567,1,0,0,
  	0,569,570,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,
  	573,3,1,0,0,573,574,3,3,1,0,574,142,1,0,0,0,575,577,3,1,0,0,576,578,5,
  	46,0,0,577,576,1,0,0,0,577,578,1,0,0,0,578,580,1,0,0,0,579,581,7,1,0,
  	0,580,579,1,0,0,0,581,582,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,
  	584,1,0,0,0,584,585,3,1,0,0,585,586,3,3,1,0,586,144,1,0,0,0,587,591,7,
  	2,0,0,588,590,7,3,0,0,589,588,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,
  	591,592,1,0,0,0,592,146,1,0,0,0,593,591,1,0,0,0,594,597,3,149,74,0,595,
  	597,3,151,75,0,596,594,1,0,0,0,596,595,1,0,0,0,597,148,1,0,0,0,598,599,
  	5,48,0,0,599,600,5,120,0,0,600,602,1,0,0,0,601,603,7,4,0,0,602,601,1,
  	0,0,0,603,604,1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,150,1,0,0,0,
  	606,608,7,5,0,0,607,606,1,0,0,0,608,609,1,0,0,0,609,607,1,0,0,0,609,610,
  	1,0,0,0,610,152,1,0,0,0,611,612,5,123,0,0,612,613,5,123,0,0,613,617,1,
  	0,0,0,614,616,9,0,0,0,615,614,1,0,0,0,616,619,1,0,0,0,617,618,1,0,0,0,
  	617,615,1,0,0,0,618,620,1,0,0,0,619,617,1,0,0,0,620,621,5,125,0,0,621,
  	622,5,125,0,0,622,154,1,0,0,0,623,625,7,6,0,0,624,623,1,0,0,0,625,626,
  	1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,629,6,77,
  	0,0,629,156,1,0,0,0,630,632,5,13,0,0,631,633,5,10,0,0,632,631,1,0,0,0,
  	632,633,1,0,0,0,633,636,1,0,0,0,634,636,5,10,0,0,635,630,1,0,0,0,635,
  	634,1,0,0,0,636,637,1,0,0,0,637,638,6,78,0,0,638,158,1,0,0,0,639,640,
  	5,47,0,0,640,641,5,42,0,0,641,645,1,0,0,0,642,644,9,0,0,0,643,642,1,0,
  	0,0,644,647,1,0,0,0,645,646,1,0,0,0,645,643,1,0,0,0,646,648,1,0,0,0,647,
  	645,1,0,0,0,648,649,5,42,0,0,649,650,5,47,0,0,650,651,1,0,0,0,651,652,
  	6,79,0,0,652,160,1,0,0,0,653,654,5,47,0,0,654,655,5,47,0,0,655,659,1,
  	0,0,0,656,658,8,7,0,0,657,656,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,
  	659,660,1,0,0,0,660,662,1,0,0,0,661,659,1,0,0,0,662,663,6,80,0,0,663,
  	162,1,0,0,0,664,665,9,0,0,0,665,164,1,0,0,0,21,0,175,394,423,433,475,
  	521,565,570,577,582,591,596,604,609,617,626,632,635,645,659,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  zhllexerLexerStaticData = staticData.release();
}

}

ZHLLexer::ZHLLexer(CharStream *input) : Lexer(input) {
  ZHLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *zhllexerLexerStaticData->atn, zhllexerLexerStaticData->decisionToDFA, zhllexerLexerStaticData->sharedContextCache);
}

ZHLLexer::~ZHLLexer() {
  delete _interpreter;
}

std::string ZHLLexer::getGrammarFileName() const {
  return "ZHLLexer.g4";
}

const std::vector<std::string>& ZHLLexer::getRuleNames() const {
  return zhllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& ZHLLexer::getChannelNames() const {
  return zhllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& ZHLLexer::getModeNames() const {
  return zhllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& ZHLLexer::getVocabulary() const {
  return zhllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ZHLLexer::getSerializedATN() const {
  return zhllexerLexerStaticData->serializedATN;
}

const atn::ATN& ZHLLexer::getATN() const {
  return *zhllexerLexerStaticData->atn;
}




void ZHLLexer::initialize() {
  ::antlr4::internal::call_once(zhllexerLexerOnceFlag, zhllexerLexerInitialize);
}
