#pragma once

#pragma warning( disable : 4722 )

#define LIBZHL_INTERFACE __declspec(novtable)

#define MOD_EXPORT extern "C" __declspec(dllexport)

__declspec(noreturn) inline void __cdecl __NOP() {}
#define LIBZHL_PLACEHOLDER {__NOP();}

#include "libzhl.h"


#include <windows.h>
//#include "rapidxml.hpp"
#include <string>
#include <vector>
#include <set>
#include <map>
#include <functional>
#include <deque>
#include <cstdarg>
#include <unordered_map>
#include <cmath>
#include <queue>
    #include <cstdint>
#include <bitset>
#undef LoadImage

#ifndef M_PI
	#define M_PI 3.14159265358979323846
#endif

extern "C"
{
	#include "lstate.h"
}


    struct Console_HistoryEntry;

typedef std::deque<Console_HistoryEntry> std_deque_console_historyentry;

typedef std::set<int> std_set_int;


	

enum WeaponType
{
	WEAPON_NULL = 0x0,
	WEAPON_TEARS = 0x1,
	WEAPON_BRIMSTONE = 0x2,
	WEAPON_LASER = 0x3,
	WEAPON_KNIFE = 0x4,
	WEAPON_BOMBS = 0x5,
	WEAPON_ROCKETS = 0x6,
	WEAPON_MONSTROS_LUNGS = 0x7,
	WEAPON_LUDOVICO_TECHNIQUE = 0x8,
	WEAPON_TECH_X = 0x9,
	WEAPON_BONE = 0xA,
	WEAPON_NOTCHED_AXE = 0xB,
	WEAPON_URN_OF_SOULS = 0xC,
	WEAPON_SPIRIT_SWORD = 0xD,
	WEAPON_FETUS = 0xE,
 		WEAPON_UMBILICAL_WHIP = 0xF,
	NUM_WEAPON_TYPES = 0x10,
};

enum GridEntityType {
	GRID_NULL = 0x0,
	GRID_DECORATION = 0x1,
	GRID_ROCK = 0x2,
	GRID_ROCKB = 0x3,	
	GRID_ROCKT = 0x4,	
	GRID_ROCK_BOMB = 0x5,	
	GRID_ROCK_ALT = 0x6,	
	GRID_PIT = 0x7,
	GRID_SPIKES = 0x8,
	GRID_SPIKES_ONOFF = 0x9,
	GRID_SPIDERWEB = 0xA,
	GRID_LOCK = 0xB,
	GRID_TNT = 0xC,
	GRID_FIREPLACE = 0xD,
	GRID_POOP = 0xE,
	GRID_WALL = 0xF,
	GRID_DOOR = 0x10,
	GRID_TRAPDOOR = 0x11,
	GRID_STAIRS = 0x12,
	GRID_GRAVITY = 0x13,
	GRID_PRESSURE_PLATE = 0x14,
	GRID_STATUE = 0x15,
	GRID_ROCK_SS = 0x16,
	GRID_TELEPORTER = 0x17,
	GRID_PILLAR = 0x18,
	GRID_ROCK_SPIKED = 0x19,
	GRID_ROCK_ALT2 = 0x1A,
	GRID_ROCK_GOLD = 0x1B,
};

enum Direction
{
	NO_DIRECTION = 0xFFFFFFFF,
	LEFT = 0x0,
	UP = 0x1,
	RIGHT = 0x2,
	DOWN = 0x3,
};
    
    enum eRoomShape 
    {
        ROOMSHAPE_1x1 = 1,
        ROOMSHAPE_IH, // Horizontal, narrow
        ROOMSHAPE_IV, // Vertical, narrow
        ROOMSHAPE_1x2, // Vertical, two high
        ROOMSHAPE_IIV, // Vertical, two high, narrow
        ROOMSHAPE_2x1, // Horizontal, two wide
        ROOMSHAPE_IIH, // Horizontal, two wide, narrow
        ROOMSHAPE_2x2,
        ROOMSHAPE_LTL, 
        ROOMSHAPE_LTR,
        ROOMSHAPE_LBL,
        ROOMSHAPE_LBR,
        MAX_ROOMSHAPES
    };
    
    enum eDoorSlots 
    {
        DOOR_SLOT_LEFT0 = 0, // Left wall, top
        DOOR_SLOT_UP0, // Top wall, left
        DOOR_SLOT_RIGHT0, // Right wall, top
        DOOR_SLOT_DOWN0, // Down wall, left
        DOOR_SLOT_LEFT1, // Left wall, bottom
        DOOR_SLOT_UP1, // Top wall, right
        DOOR_SLOT_RIGHT1, // Right wall, bottom
        DOOR_SLOT_DOWN1, // Bottom wall, right
        MAX_DOOR_SLOTS
    };

enum GridCollisionClass
{
	COLLISION_NONE = 0,
	COLLISION_PIT,
	COLLISION_OBJECT,
	COLLISION_SOLID,
	COLLISION_WALL,
	COLLISION_WALL_EXCEPT_PLAYER
};

enum CollectibleType
{
	COLLECTIBLE_NULL = 0,
	COLLECTIBLE_SAD_ONION = 1,
	COLLECTIBLE_INNER_EYE = 2,
	COLLECTIBLE_SPOON_BENDER = 3,
	COLLECTIBLE_CRICKETS_HEAD = 4,
	COLLECTIBLE_MY_REFLECTION = 5,
	COLLECTIBLE_NUMBER_ONE = 6,
	COLLECTIBLE_BLOOD_OF_THE_MARTYR = 7,
	COLLECTIBLE_BROTHER_BOBBY = 8,
	COLLECTIBLE_SKATOLE = 9,
	COLLECTIBLE_HALO_OF_FLIES = 10,
	COLLECTIBLE_1UP = 11,
	COLLECTIBLE_MAGIC_MUSHROOM = 12,
	COLLECTIBLE_VIRUS = 13,
	COLLECTIBLE_ROID_RAGE = 14,
	COLLECTIBLE_HEART = 15,
	COLLECTIBLE_RAW_LIVER = 16,
	COLLECTIBLE_SKELETON_KEY = 17,
	COLLECTIBLE_DOLLAR = 18,
	COLLECTIBLE_BOOM = 19,
	COLLECTIBLE_TRANSCENDENCE = 20,
	COLLECTIBLE_COMPASS = 21,
	COLLECTIBLE_LUNCH = 22,
	COLLECTIBLE_DINNER = 23,
	COLLECTIBLE_DESSERT = 24,
	COLLECTIBLE_BREAKFAST = 25,
	COLLECTIBLE_ROTTEN_MEAT = 26,
	COLLECTIBLE_WOODEN_SPOON = 27,
	COLLECTIBLE_BELT = 28,
	COLLECTIBLE_MOMS_UNDERWEAR = 29,
	COLLECTIBLE_MOMS_HEELS = 30,
	COLLECTIBLE_MOMS_LIPSTICK = 31,
	COLLECTIBLE_WIRE_COAT_HANGER = 32,
	COLLECTIBLE_BIBLE = 33,
	COLLECTIBLE_BOOK_OF_BELIAL = 34,
	COLLECTIBLE_NECRONOMICON = 35,
	COLLECTIBLE_POOP = 36,
	COLLECTIBLE_MR_BOOM = 37,
	COLLECTIBLE_TAMMYS_HEAD = 38,
	COLLECTIBLE_MOMS_BRA = 39,
	COLLECTIBLE_KAMIKAZE = 40,
	COLLECTIBLE_MOMS_PAD = 41,
	COLLECTIBLE_BOBS_ROTTEN_HEAD = 42,
	// 43
	COLLECTIBLE_TELEPORT = 44,
	COLLECTIBLE_YUM_HEART = 45,
	COLLECTIBLE_LUCKY_FOOT = 46,
	COLLECTIBLE_DOCTORS_REMOTE = 47,
	COLLECTIBLE_CUPIDS_ARROW = 48,
	COLLECTIBLE_SHOOP_DA_WHOOP = 49,
	COLLECTIBLE_STEVEN = 50,
	COLLECTIBLE_PENTAGRAM = 51,
	COLLECTIBLE_DR_FETUS = 52,
	COLLECTIBLE_MAGNETO = 53,
	COLLECTIBLE_TREASURE_MAP = 54,
	COLLECTIBLE_MOMS_EYE = 55,
	COLLECTIBLE_LEMON_MISHAP = 56,
	COLLECTIBLE_DISTANT_ADMIRATION = 57,
	COLLECTIBLE_BOOK_OF_SHADOWS = 58,
	COLLECTIBLE_BOOK_OF_BELIAL_PASSIVE = 59,
	COLLECTIBLE_LADDER = 60,
	// 61
	COLLECTIBLE_CHARM_VAMPIRE = 62,
	COLLECTIBLE_BATTERY = 63,
	COLLECTIBLE_STEAM_SALE = 64,
	COLLECTIBLE_ANARCHIST_COOKBOOK = 65,
	COLLECTIBLE_HOURGLASS = 66,
	COLLECTIBLE_SISTER_MAGGY = 67,
	COLLECTIBLE_TECHNOLOGY = 68,
	COLLECTIBLE_CHOCOLATE_MILK = 69,
	COLLECTIBLE_GROWTH_HORMONES = 70,
	COLLECTIBLE_MINI_MUSH = 71,
	COLLECTIBLE_ROSARY = 72,
	COLLECTIBLE_CUBE_OF_MEAT = 73,
	COLLECTIBLE_QUARTER = 74,
	COLLECTIBLE_PHD = 75,
	COLLECTIBLE_XRAY_VISION = 76,
	COLLECTIBLE_MY_LITTLE_UNICORN = 77,
	COLLECTIBLE_BOOK_OF_REVELATIONS = 78,
	COLLECTIBLE_MARK = 79,
	COLLECTIBLE_PACT = 80,
	COLLECTIBLE_DEAD_CAT = 81,
	COLLECTIBLE_LORD_OF_THE_PIT = 82,
	COLLECTIBLE_THE_NAIL = 83,
	COLLECTIBLE_WE_NEED_TO_GO_DEEPER = 84,
	COLLECTIBLE_DECK_OF_CARDS = 85,
	COLLECTIBLE_MONSTROS_TOOTH = 86,
	COLLECTIBLE_LOKIS_HORNS = 87,
	COLLECTIBLE_LITTLE_CHUBBY = 88,
	COLLECTIBLE_SPIDER_BITE = 89,
	COLLECTIBLE_SMALL_ROCK = 90,
	COLLECTIBLE_SPELUNKER_HAT = 91,
	COLLECTIBLE_SUPER_BANDAGE = 92,
	COLLECTIBLE_GAMEKID = 93,
	COLLECTIBLE_SACK_OF_PENNIES = 94,
	COLLECTIBLE_ROBO_BABY = 95,
	COLLECTIBLE_LITTLE_CHAD = 96,
	COLLECTIBLE_BOOK_OF_SIN = 97,
	COLLECTIBLE_RELIC = 98,
	COLLECTIBLE_LITTLE_GISH = 99,
	COLLECTIBLE_LITTLE_STEVEN = 100,
	COLLECTIBLE_HALO = 101,
	COLLECTIBLE_MOMS_BOTTLE_OF_PILLS = 102,
	COLLECTIBLE_COMMON_COLD = 103,
	COLLECTIBLE_PARASITE = 104,
	COLLECTIBLE_D6 = 105,
	COLLECTIBLE_MR_MEGA = 106,
	COLLECTIBLE_PINKING_SHEARS = 107,
	COLLECTIBLE_WAFER = 108,
	COLLECTIBLE_MONEY_EQUALS_POWER = 109,
	COLLECTIBLE_MOMS_CONTACTS = 110,
	COLLECTIBLE_BEAN = 111,
	COLLECTIBLE_GUARDIAN_ANGEL = 112,
	COLLECTIBLE_DEMON_BABY = 113,
	COLLECTIBLE_MOMS_KNIFE = 114,
	COLLECTIBLE_OUIJA_BOARD = 115,
	COLLECTIBLE_9_VOLT = 116,
	COLLECTIBLE_DEAD_BIRD = 117,
	COLLECTIBLE_BRIMSTONE = 118,
	COLLECTIBLE_BLOOD_BAG = 119,
	COLLECTIBLE_ODD_MUSHROOM_THIN = 120,
	COLLECTIBLE_ODD_MUSHROOM_LARGE = 121,
	COLLECTIBLE_WHORE_OF_BABYLON = 122,
	COLLECTIBLE_MONSTER_MANUAL = 123,
	COLLECTIBLE_DEAD_SEA_SCROLLS = 124,
	COLLECTIBLE_BOBBY_BOMB = 125,
	COLLECTIBLE_RAZOR_BLADE = 126,
	COLLECTIBLE_FORGET_ME_NOW = 127,
	COLLECTIBLE_FOREVER_ALONE = 128,
	COLLECTIBLE_BUCKET_OF_LARD = 129,
	COLLECTIBLE_PONY = 130,
	COLLECTIBLE_BOMB_BAG = 131,
	COLLECTIBLE_LUMP_OF_COAL = 132,
	COLLECTIBLE_GUPPYS_PAW = 133,
	COLLECTIBLE_GUPPYS_TAIL = 134,
	COLLECTIBLE_IV_BAG = 135,
	COLLECTIBLE_BEST_FRIEND = 136,
	COLLECTIBLE_REMOTE_DETONATOR = 137,
	COLLECTIBLE_STIGMATA = 138,
	COLLECTIBLE_MOMS_PURSE = 139,
	COLLECTIBLE_BOBS_CURSE = 140,
	COLLECTIBLE_PAGEANT_BOY = 141,
	COLLECTIBLE_SCAPULAR = 142,
	COLLECTIBLE_SPEED_BALL = 143,
	COLLECTIBLE_BUM_FRIEND = 144,
	COLLECTIBLE_GUPPYS_HEAD = 145,
	COLLECTIBLE_PRAYER_CARD = 146,
	COLLECTIBLE_NOTCHED_AXE = 147,
	COLLECTIBLE_INFESTATION = 148,
	COLLECTIBLE_IPECAC = 149,
	COLLECTIBLE_TOUGH_LOVE = 150,
	COLLECTIBLE_MULLIGAN = 151,
	COLLECTIBLE_TECHNOLOGY_2 = 152,
	COLLECTIBLE_MUTANT_SPIDER = 153,
	COLLECTIBLE_CHEMICAL_PEEL = 154,
	COLLECTIBLE_PEEPER = 155,
	COLLECTIBLE_HABIT = 156,
	COLLECTIBLE_BLOODY_LUST = 157,
	COLLECTIBLE_CRYSTAL_BALL = 158,
	COLLECTIBLE_SPIRIT_OF_THE_NIGHT = 159,
	COLLECTIBLE_CRACK_THE_SKY = 160,
	COLLECTIBLE_ANKH = 161,
	COLLECTIBLE_CELTIC_CROSS = 162,
	COLLECTIBLE_GHOST_BABY = 163,
	COLLECTIBLE_CANDLE = 164,
	COLLECTIBLE_CAT_O_NINE_TAILS = 165,
	COLLECTIBLE_D20 = 166,
	COLLECTIBLE_HARLEQUIN_BABY = 167,
	COLLECTIBLE_EPIC_FETUS = 168,
	COLLECTIBLE_POLYPHEMUS = 169,
	COLLECTIBLE_DADDY_LONGLEGS = 170,
	COLLECTIBLE_SPIDER_BUTT = 171,
	COLLECTIBLE_SACRIFICIAL_DAGGER = 172,
	COLLECTIBLE_MITRE = 173,
	COLLECTIBLE_RAINBOW_BABY = 174,
	COLLECTIBLE_DADS_KEY = 175,
	COLLECTIBLE_STEM_CELLS = 176,
	COLLECTIBLE_PORTABLE_SLOT = 177,
	COLLECTIBLE_HOLY_WATER = 178,
	COLLECTIBLE_FATE = 179,
	COLLECTIBLE_BLACK_BEAN = 180,
	COLLECTIBLE_WHITE_PONY = 181,
	COLLECTIBLE_SACRED_HEART = 182,
	COLLECTIBLE_TOOTH_PICKS = 183,
	COLLECTIBLE_HOLY_GRAIL = 184,
	COLLECTIBLE_DEAD_DOVE = 185,
	COLLECTIBLE_BLOOD_RIGHTS = 186,
	COLLECTIBLE_GUPPYS_HAIRBALL = 187,
	COLLECTIBLE_ABEL = 188,
	COLLECTIBLE_SMB_SUPER_FAN = 189,
	COLLECTIBLE_PYRO = 190,
	COLLECTIBLE_3_DOLLAR_BILL = 191,
	COLLECTIBLE_TELEPATHY_BOOK = 192,
	COLLECTIBLE_MEAT = 193,
	COLLECTIBLE_MAGIC_8_BALL = 194,
	COLLECTIBLE_MOMS_COIN_PURSE = 195,
	COLLECTIBLE_SQUEEZY = 196,
	COLLECTIBLE_JESUS_JUICE = 197,
	COLLECTIBLE_BOX = 198,
	COLLECTIBLE_MOMS_KEY = 199,
	COLLECTIBLE_MOMS_EYESHADOW = 200,
	COLLECTIBLE_IRON_BAR = 201,
	COLLECTIBLE_MIDAS_TOUCH = 202,
	COLLECTIBLE_HUMBLEING_BUNDLE = 203,
	COLLECTIBLE_FANNY_PACK = 204,
	COLLECTIBLE_SHARP_PLUG = 205,
	COLLECTIBLE_GUILLOTINE = 206,
	COLLECTIBLE_BALL_OF_BANDAGES = 207,
	COLLECTIBLE_CHAMPION_BELT = 208,
	COLLECTIBLE_BUTT_BOMBS = 209,
	COLLECTIBLE_GNAWED_LEAF = 210,
	COLLECTIBLE_SPIDERBABY = 211,
	COLLECTIBLE_GUPPYS_COLLAR = 212,
	COLLECTIBLE_LOST_CONTACT = 213,
	COLLECTIBLE_ANEMIC = 214,
	COLLECTIBLE_GOAT_HEAD = 215,
	COLLECTIBLE_CEREMONIAL_ROBES = 216,
	COLLECTIBLE_MOMS_WIG = 217,
	COLLECTIBLE_PLACENTA = 218,
	COLLECTIBLE_OLD_BANDAGE = 219,
	COLLECTIBLE_SAD_BOMBS = 220,
	COLLECTIBLE_RUBBER_CEMENT = 221,
	COLLECTIBLE_ANTI_GRAVITY = 222,
	COLLECTIBLE_PYROMANIAC = 223,
	COLLECTIBLE_CRICKETS_BODY = 224,
	COLLECTIBLE_GIMPY = 225,
	COLLECTIBLE_BLACK_LOTUS = 226,
	COLLECTIBLE_PIGGY_BANK = 227,
	COLLECTIBLE_MOMS_PERFUME = 228,
	COLLECTIBLE_MONSTROS_LUNG = 229,
	COLLECTIBLE_ABADDON = 230,
	COLLECTIBLE_BALL_OF_TAR = 231,
	COLLECTIBLE_STOP_WATCH = 232,
	COLLECTIBLE_TINY_PLANET = 233,
	COLLECTIBLE_INFESTATION_2 = 234,
	// 235
	COLLECTIBLE_E_COLI = 236,
	COLLECTIBLE_DEATHS_TOUCH = 237,
	COLLECTIBLE_KEY_PIECE_1 = 238,
	COLLECTIBLE_KEY_PIECE_2 = 239,
	COLLECTIBLE_EXPERIMENTAL_TREATMENT = 240,
	COLLECTIBLE_CONTRACT_FROM_BELOW = 241,
	COLLECTIBLE_INFAMY = 242,
	COLLECTIBLE_TRINITY_SHIELD = 243,
	COLLECTIBLE_TECH_5 = 244,
	COLLECTIBLE_20_20 = 245,
	COLLECTIBLE_BLUE_MAP = 246,
	COLLECTIBLE_BFFS = 247,
	COLLECTIBLE_HIVE_MIND = 248,
	COLLECTIBLE_THERES_OPTIONS = 249,
	COLLECTIBLE_BOGO_BOMBS = 250,
	COLLECTIBLE_STARTER_DECK = 251,
	COLLECTIBLE_LITTLE_BAGGY = 252,
	COLLECTIBLE_MAGIC_SCAB = 253,
	COLLECTIBLE_BLOOD_CLOT = 254,
	COLLECTIBLE_SCREW = 255,
	COLLECTIBLE_HOT_BOMBS = 256,
	COLLECTIBLE_FIRE_MIND = 257,
	COLLECTIBLE_MISSING_NO = 258,
	COLLECTIBLE_DARK_MATTER = 259,
	COLLECTIBLE_BLACK_CANDLE = 260,
	COLLECTIBLE_PROPTOSIS = 261,
	COLLECTIBLE_MISSING_PAGE_2 = 262,
	COLLECTIBLE_CLEAR_RUNE = 263,
	COLLECTIBLE_SMART_FLY = 264,
	COLLECTIBLE_DRY_BABY = 265,
	COLLECTIBLE_JUICY_SACK = 266,
	COLLECTIBLE_ROBO_BABY_2 = 267,
	COLLECTIBLE_ROTTEN_BABY = 268,
	COLLECTIBLE_HEADLESS_BABY = 269,
	COLLECTIBLE_LEECH = 270,
	COLLECTIBLE_MYSTERY_SACK = 271,
	COLLECTIBLE_BBF = 272,
	COLLECTIBLE_BOBS_BRAIN = 273,
	COLLECTIBLE_BEST_BUD = 274,
	COLLECTIBLE_LIL_BRIMSTONE = 275,
	COLLECTIBLE_ISAACS_HEART = 276,
	COLLECTIBLE_LIL_HAUNT = 277,
	COLLECTIBLE_DARK_BUM = 278,
	COLLECTIBLE_BIG_FAN = 279,
	COLLECTIBLE_SISSY_LONGLEGS = 280,
	COLLECTIBLE_PUNCHING_BAG = 281,
	COLLECTIBLE_HOW_TO_JUMP = 282,
	COLLECTIBLE_D100 = 283,
	COLLECTIBLE_D4 = 284,
	COLLECTIBLE_D10 = 285,
	COLLECTIBLE_BLANK_CARD = 286,
	COLLECTIBLE_BOOK_OF_SECRETS = 287,
	COLLECTIBLE_BOX_OF_SPIDERS = 288,
	COLLECTIBLE_RED_CANDLE = 289,
	COLLECTIBLE_THE_JAR = 290,
	COLLECTIBLE_FLUSH = 291,
	COLLECTIBLE_SATANIC_BIBLE = 292,
	COLLECTIBLE_HEAD_OF_KRAMPUS = 293,
	COLLECTIBLE_BUTTER_BEAN = 294,
	COLLECTIBLE_MAGIC_FINGERS = 295,
	COLLECTIBLE_CONVERTER = 296,
	COLLECTIBLE_BLUE_BOX = 297,
	COLLECTIBLE_UNICORN_STUMP = 298,
	COLLECTIBLE_TAURUS = 299,
	COLLECTIBLE_ARIES = 300,
	COLLECTIBLE_CANCER = 301,
	COLLECTIBLE_LEO = 302,
	COLLECTIBLE_VIRGO = 303,
	COLLECTIBLE_LIBRA = 304,
	COLLECTIBLE_SCORPIO = 305,
	COLLECTIBLE_SAGITTARIUS = 306,
	COLLECTIBLE_CAPRICORN = 307,
	COLLECTIBLE_AQUARIUS = 308,
	COLLECTIBLE_PISCES = 309,
	COLLECTIBLE_EVES_MASCARA = 310,
	COLLECTIBLE_JUDAS_SHADOW = 311,
	COLLECTIBLE_MAGGYS_BOW = 312,
	COLLECTIBLE_HOLY_MANTLE = 313,
	COLLECTIBLE_THUNDER_THIGHS = 314,
	COLLECTIBLE_STRANGE_ATTRACTOR = 315,
	COLLECTIBLE_CURSED_EYE = 316,
	COLLECTIBLE_MYSTERIOUS_LIQUID = 317,
	COLLECTIBLE_GEMINI = 318,
	COLLECTIBLE_CAINS_OTHER_EYE = 319,
	COLLECTIBLE_BLUE_BABYS_ONLY_FRIEND = 320,
	COLLECTIBLE_SAMSONS_CHAINS = 321,
	COLLECTIBLE_MONGO_BABY = 322,
	COLLECTIBLE_ISAACS_TEARS = 323,
	COLLECTIBLE_UNDEFINED = 324,
	COLLECTIBLE_SCISSORS = 325,
	COLLECTIBLE_BREATH_OF_LIFE = 326,
	COLLECTIBLE_POLAROID = 327,
	COLLECTIBLE_NEGATIVE = 328,
	COLLECTIBLE_LUDOVICO_TECHNIQUE = 329,
	COLLECTIBLE_SOY_MILK = 330,
	COLLECTIBLE_GODHEAD = 331,
	COLLECTIBLE_LAZARUS_RAGS = 332,
	COLLECTIBLE_MIND = 333,
	COLLECTIBLE_BODY = 334,
	COLLECTIBLE_SOUL = 335,
	COLLECTIBLE_DEAD_ONION = 336,
	COLLECTIBLE_BROKEN_WATCH = 337,
	COLLECTIBLE_BOOMERANG = 338,
	COLLECTIBLE_SAFETY_PIN = 339,
	COLLECTIBLE_CAFFEINE_PILL = 340,
	COLLECTIBLE_TORN_PHOTO = 341,
	COLLECTIBLE_BLUE_CAP = 342,
	COLLECTIBLE_LATCH_KEY = 343,
	COLLECTIBLE_MATCH_BOOK = 344,
	COLLECTIBLE_SYNTHOIL = 345,
	COLLECTIBLE_SNACK = 346,
	COLLECTIBLE_DIPLOPIA = 347,
	COLLECTIBLE_PLACEBO = 348,
	COLLECTIBLE_WOODEN_NICKEL = 349,
	COLLECTIBLE_TOXIC_SHOCK = 350,
	COLLECTIBLE_MEGA_BEAN = 351,
	COLLECTIBLE_GLASS_CANNON = 352,
	COLLECTIBLE_BOMBER_BOY = 353,
	COLLECTIBLE_CRACK_JACKS = 354,
	COLLECTIBLE_MOMS_PEARLS = 355,
	COLLECTIBLE_CAR_BATTERY = 356,
	COLLECTIBLE_BOX_OF_FRIENDS = 357,
	COLLECTIBLE_THE_WIZ = 358,
	COLLECTIBLE_8_INCH_NAILS = 359,
	COLLECTIBLE_INCUBUS = 360,
	COLLECTIBLE_FATES_REWARD = 361,
	COLLECTIBLE_LIL_CHEST = 362,
	COLLECTIBLE_SWORN_PROTECTOR = 363,
	COLLECTIBLE_FRIEND_ZONE = 364,
	COLLECTIBLE_LOST_FLY = 365,
	COLLECTIBLE_SCATTER_BOMBS = 366,
	COLLECTIBLE_STICKY_BOMBS = 367,
	COLLECTIBLE_EPIPHORA = 368,
	COLLECTIBLE_CONTINUUM = 369,
	COLLECTIBLE_MR_DOLLY = 370,
	COLLECTIBLE_CURSE_OF_THE_TOWER = 371,
	COLLECTIBLE_CHARGED_BABY = 372,
	COLLECTIBLE_DEAD_EYE = 373,
	COLLECTIBLE_HOLY_LIGHT = 374,
	COLLECTIBLE_HOST_HAT = 375,
	COLLECTIBLE_RESTOCK = 376,
	COLLECTIBLE_BURSTING_SACK = 377,
	COLLECTIBLE_NUMBER_TWO = 378,
	COLLECTIBLE_PUPULA_DUPLEX = 379,
	COLLECTIBLE_PAY_TO_PLAY = 380,
	COLLECTIBLE_EDENS_BLESSING = 381,
	COLLECTIBLE_FRIEND_BALL = 382,
	COLLECTIBLE_TEAR_DETONATOR = 383,
	COLLECTIBLE_LIL_GURDY = 384,
	COLLECTIBLE_BUMBO = 385,
	COLLECTIBLE_D12 = 386,
	COLLECTIBLE_CENSER = 387,
	COLLECTIBLE_KEY_BUM = 388,
	COLLECTIBLE_RUNE_BAG = 389,
	COLLECTIBLE_SERAPHIM = 390,
	COLLECTIBLE_BETRAYAL = 391,
	COLLECTIBLE_ZODIAC = 392,
	COLLECTIBLE_SERPENTS_KISS = 393,
	COLLECTIBLE_MARKED = 394,
	COLLECTIBLE_TECH_X = 395,
	COLLECTIBLE_VENTRICLE_RAZOR = 396,
	COLLECTIBLE_TRACTOR_BEAM = 397,
	COLLECTIBLE_GODS_FLESH = 398,
	COLLECTIBLE_MAW_OF_THE_VOID = 399,
	COLLECTIBLE_SPEAR_OF_DESTINY = 400,
	COLLECTIBLE_EXPLOSIVO = 401,
	COLLECTIBLE_CHAOS = 402,
	COLLECTIBLE_SPIDER_MOD = 403,
	COLLECTIBLE_FARTING_BABY = 404,
	COLLECTIBLE_GB_BUG = 405,
	COLLECTIBLE_D8 = 406,
	COLLECTIBLE_PURITY = 407,
	COLLECTIBLE_ATHAME = 408,
	COLLECTIBLE_EMPTY_VESSEL = 409,
	COLLECTIBLE_EVIL_EYE = 410,
	COLLECTIBLE_LUSTY_BLOOD = 411,
	COLLECTIBLE_CAMBION_CONCEPTION = 412,
	COLLECTIBLE_IMMACULATE_CONCEPTION = 413,
	COLLECTIBLE_MORE_OPTIONS = 414,
	COLLECTIBLE_CROWN_OF_LIGHT = 415,
	COLLECTIBLE_DEEP_POCKETS = 416,
	COLLECTIBLE_SUCCUBUS = 417,
	COLLECTIBLE_FRUIT_CAKE = 418,
	COLLECTIBLE_TELEPORT_2 = 419,
	COLLECTIBLE_BLACK_POWDER = 420,
	COLLECTIBLE_KIDNEY_BEAN = 421,
	COLLECTIBLE_GLOWING_HOUR_GLASS = 422,
	COLLECTIBLE_CIRCLE_OF_PROTECTION = 423,
	COLLECTIBLE_SACK_HEAD = 424,
	COLLECTIBLE_NIGHT_LIGHT = 425,
	COLLECTIBLE_OBSESSED_FAN = 426,
	COLLECTIBLE_MINE_CRAFTER = 427,
	COLLECTIBLE_PJS = 428,
	COLLECTIBLE_HEAD_OF_THE_KEEPER = 429,
	COLLECTIBLE_PAPA_FLY = 430,
	COLLECTIBLE_MULTIDIMENSIONAL_BABY = 431,
	COLLECTIBLE_GLITTER_BOMBS = 432,
	COLLECTIBLE_MY_SHADOW = 433,
	COLLECTIBLE_JAR_OF_FLIES = 434,
	COLLECTIBLE_LIL_LOKI = 435,
	COLLECTIBLE_MILK = 436,
	COLLECTIBLE_D7 = 437,
	COLLECTIBLE_BINKY = 438,
	COLLECTIBLE_MOMS_BOX = 439,
	COLLECTIBLE_KIDNEY_STONE = 440,
	COLLECTIBLE_MEGA_BLAST = 441,
	COLLECTIBLE_DARK_PRINCES_CROWN = 442,
	COLLECTIBLE_APPLE = 443,
	COLLECTIBLE_LEAD_PENCIL = 444,
	COLLECTIBLE_DOG_TOOTH = 445,
	COLLECTIBLE_DEAD_TOOTH = 446,
	COLLECTIBLE_LINGER_BEAN = 447,
	COLLECTIBLE_SHARD_OF_GLASS = 448,
	COLLECTIBLE_METAL_PLATE = 449,
	COLLECTIBLE_EYE_OF_GREED = 450,
	COLLECTIBLE_TAROT_CLOTH = 451,
	COLLECTIBLE_VARICOSE_VEINS = 452,
	COLLECTIBLE_COMPOUND_FRACTURE = 453,
	COLLECTIBLE_POLYDACTYLY = 454,
	COLLECTIBLE_DADS_LOST_COIN = 455,
	COLLECTIBLE_MIDNIGHT_SNACK = 456,
	COLLECTIBLE_CONE_HEAD = 457,
	COLLECTIBLE_BELLY_BUTTON = 458,
	COLLECTIBLE_SINUS_INFECTION = 459,
	COLLECTIBLE_GLAUCOMA = 460,
	COLLECTIBLE_PARASITOID = 461,
	COLLECTIBLE_EYE_OF_BELIAL = 462,
	COLLECTIBLE_SULFURIC_ACID = 463,
	COLLECTIBLE_GLYPH_OF_BALANCE = 464,
	COLLECTIBLE_ANALOG_STICK = 465,
	COLLECTIBLE_CONTAGION = 466,
	COLLECTIBLE_FINGER = 467,
	COLLECTIBLE_SHADE = 468,
	COLLECTIBLE_DEPRESSION = 469,
	COLLECTIBLE_HUSHY = 470,
	COLLECTIBLE_LIL_MONSTRO = 471,
	COLLECTIBLE_KING_BABY = 472,
	COLLECTIBLE_BIG_CHUBBY = 473,
	COLLECTIBLE_BROKEN_GLASS_CANNON = 474,
	COLLECTIBLE_PLAN_C = 475,
	COLLECTIBLE_D1 = 476,
	COLLECTIBLE_VOID = 477,
	COLLECTIBLE_PAUSE = 478,
	COLLECTIBLE_SMELTER = 479,
	COLLECTIBLE_COMPOST = 480,
	COLLECTIBLE_DATAMINER = 481,
	COLLECTIBLE_CLICKER = 482,
	COLLECTIBLE_MAMA_MEGA = 483,
	COLLECTIBLE_WAIT_WHAT = 484,
	COLLECTIBLE_CROOKED_PENNY = 485,
	COLLECTIBLE_DULL_RAZOR = 486,
	COLLECTIBLE_POTATO_PEELER = 487,
	COLLECTIBLE_METRONOME = 488,
	COLLECTIBLE_D_INFINITY = 489,
	COLLECTIBLE_EDENS_SOUL = 490,
	COLLECTIBLE_ACID_BABY = 491,
	COLLECTIBLE_YO_LISTEN = 492,
	COLLECTIBLE_ADRENALINE = 493,
	COLLECTIBLE_JACOBS_LADDER = 494,
	COLLECTIBLE_GHOST_PEPPER = 495,
	COLLECTIBLE_EUTHANASIA = 496,
	COLLECTIBLE_CAMO_UNDIES = 497,
	COLLECTIBLE_DUALITY = 498,
	COLLECTIBLE_EUCHARIST = 499,
	COLLECTIBLE_SACK_OF_SACKS = 500,
	COLLECTIBLE_GREEDS_GULLET = 501,
	COLLECTIBLE_LARGE_ZIT = 502,
	COLLECTIBLE_LITTLE_HORN = 503,
	COLLECTIBLE_BROWN_NUGGET = 504,
	COLLECTIBLE_POKE_GO = 505,
	COLLECTIBLE_BACKSTABBER = 506,
	COLLECTIBLE_SHARP_STRAW = 507,
	COLLECTIBLE_MOMS_RAZOR = 508,
	COLLECTIBLE_BLOODSHOT_EYE = 509,
	COLLECTIBLE_DELIRIOUS = 510,
	
	// Booster Pack #1
	COLLECTIBLE_ANGRY_FLY = 511,
	COLLECTIBLE_BLACK_HOLE = 512,
	COLLECTIBLE_BOZO = 513,
	COLLECTIBLE_BROKEN_MODEM = 514,
	COLLECTIBLE_MYSTERY_GIFT = 515,
	COLLECTIBLE_SPRINKLER = 516,
	COLLECTIBLE_FAST_BOMBS = 517,
	COLLECTIBLE_BUDDY_IN_A_BOX = 518,
	COLLECTIBLE_LIL_DELIRIUM = 519,

	// Booster Pack #2
	COLLECTIBLE_JUMPER_CABLES = 520,
	COLLECTIBLE_COUPON = 521,
	COLLECTIBLE_TELEKINESIS = 522,
	COLLECTIBLE_MOVING_BOX = 523,
	COLLECTIBLE_TECHNOLOGY_ZERO = 524,
	COLLECTIBLE_LEPROSY = 525,
	
	// Booster Pack #3
	COLLECTIBLE_7_SEALS = 526,
	COLLECTIBLE_MR_ME = 527,
	COLLECTIBLE_ANGELIC_PRISM = 528,
	COLLECTIBLE_POP = 529,

	// Booster Pack #4
	COLLECTIBLE_DEATHS_LIST = 530,
	COLLECTIBLE_HAEMOLACRIA = 531,
	COLLECTIBLE_LACHRYPHAGY = 532,
	COLLECTIBLE_TRISAGION = 533,
	COLLECTIBLE_SCHOOLBAG = 534,
	
	// Booster Pack #5
	COLLECTIBLE_BLANKET = 535,
	COLLECTIBLE_SACRIFICIAL_ALTAR = 536,
	COLLECTIBLE_LIL_SPEWER = 537,
	COLLECTIBLE_MARBLES = 538,
	COLLECTIBLE_MYSTERY_EGG = 539,
	COLLECTIBLE_FLAT_STONE = 540,

	COLLECTIBLE_MARROW = 541,
	COLLECTIBLE_SLIPPED_RIB = 542,
	COLLECTIBLE_HALLOWED_GROUND = 543,
	COLLECTIBLE_POINTY_RIB = 544,
	COLLECTIBLE_BOOK_OF_THE_DEAD = 545,
	COLLECTIBLE_DADS_RING = 546,
	COLLECTIBLE_DIVORCE_PAPERS = 547,
	COLLECTIBLE_JAW_BONE = 548,
	COLLECTIBLE_BRITTLE_BONES = 549,

	COLLECTIBLE_BROKEN_SHOVEL_1 = 550,
	COLLECTIBLE_BROKEN_SHOVEL_2 = 551,
	COLLECTIBLE_MOMS_SHOVEL = 552,

	//NUM_COLLECTIBLES = 553
	
	// Repentance
	COLLECTIBLE_MUCORMYCOSIS = 553,
	COLLECTIBLE_2SPOOKY = 554,
	COLLECTIBLE_GOLDEN_RAZOR = 555,
	COLLECTIBLE_SULFUR = 556,
	COLLECTIBLE_FORTUNE_COOKIE = 557,
	COLLECTIBLE_EYE_SORE = 558,
	COLLECTIBLE_120_VOLT = 559,
	COLLECTIBLE_IT_HURTS = 560,
	COLLECTIBLE_ALMOND_MILK = 561,
	COLLECTIBLE_ROCK_BOTTOM = 562,
	COLLECTIBLE_NANCY_BOMBS = 563,
	COLLECTIBLE_BAR_OF_SOAP = 564,
	COLLECTIBLE_BLOOD_PUPPY = 565,
	COLLECTIBLE_DREAM_CATCHER = 566,
	COLLECTIBLE_PASCHAL_CANDLE = 567,
	COLLECTIBLE_DIVINE_INTERVENTION = 568,
	COLLECTIBLE_BLOOD_OATH = 569,
	COLLECTIBLE_PLAYDOUGH_COOKIE = 570,
	COLLECTIBLE_SOCKS = 571,
	COLLECTIBLE_EYE_OF_THE_OCCULT = 572,
	COLLECTIBLE_IMMACULATE_HEART = 573,
	COLLECTIBLE_MONSTRANCE = 574,
	COLLECTIBLE_INTRUDER = 575,
	COLLECTIBLE_DIRTY_MIND = 576,
	COLLECTIBLE_DAMOCLES = 577,
	COLLECTIBLE_FREE_LEMONADE = 578,
	COLLECTIBLE_SPIRIT_SWORD = 579,
	COLLECTIBLE_RED_KEY = 580,
	COLLECTIBLE_PSY_FLY = 581,
	COLLECTIBLE_WAVY_CAP = 582,
	COLLECTIBLE_ROCKET_IN_A_JAR = 583,
	COLLECTIBLE_BOOK_OF_VIRTUES = 584,
	COLLECTIBLE_ALABASTER_BOX = 585,
	COLLECTIBLE_STAIRWAY = 586,
	// 587
	COLLECTIBLE_SOL = 588,
	COLLECTIBLE_LUNA = 589,
	COLLECTIBLE_MERCURIUS = 590,
	COLLECTIBLE_VENUS = 591,
	COLLECTIBLE_TERRA = 592,
	COLLECTIBLE_MARS = 593,
	COLLECTIBLE_JUPITER = 594,
	COLLECTIBLE_SATURNUS = 595,
	COLLECTIBLE_URANUS = 596,
	COLLECTIBLE_NEPTUNUS = 597,
	COLLECTIBLE_PLUTO = 598,
	COLLECTIBLE_VOODOO_HEAD = 599,
	COLLECTIBLE_EYE_DROPS = 600,
	COLLECTIBLE_ACT_OF_CONTRITION = 601,
	COLLECTIBLE_MEMBER_CARD = 602,
	COLLECTIBLE_BATTERY_PACK = 603,
	COLLECTIBLE_MOMS_BRACELET = 604,
	COLLECTIBLE_SCOOPER = 605,
	COLLECTIBLE_OCULAR_RIFT = 606,
	COLLECTIBLE_BOILED_BABY = 607,
	COLLECTIBLE_FREEZER_BABY = 608,
	COLLECTIBLE_ETERNAL_D6 = 609,
	COLLECTIBLE_BIRD_CAGE = 610,
	COLLECTIBLE_LARYNX = 611,
	COLLECTIBLE_LOST_SOUL = 612,
	// 613
	COLLECTIBLE_BLOOD_BOMBS = 614,
	COLLECTIBLE_LIL_DUMPY = 615,
	COLLECTIBLE_BIRDS_EYE = 616,
	COLLECTIBLE_LODESTONE = 617,
	COLLECTIBLE_ROTTEN_TOMATO = 618,
	COLLECTIBLE_BIRTHRIGHT = 619,
	// 620
	COLLECTIBLE_RED_STEW = 621,
	COLLECTIBLE_GENESIS = 622,
	COLLECTIBLE_SHARP_KEY = 623,
	COLLECTIBLE_BOOSTER_PACK = 624,
	COLLECTIBLE_MEGA_MUSH = 625,
	COLLECTIBLE_KNIFE_PIECE_1 = 626,
	COLLECTIBLE_KNIFE_PIECE_2 = 627,
	COLLECTIBLE_DEATH_CERTIFICATE = 628,
	COLLECTIBLE_BOT_FLY = 629,
	// 630
	COLLECTIBLE_MEAT_CLEAVER = 631,
	COLLECTIBLE_EVIL_CHARM = 632,
	COLLECTIBLE_DOGMA = 633,
	COLLECTIBLE_PURGATORY = 634,
	COLLECTIBLE_STITCHES = 635,
	COLLECTIBLE_R_KEY = 636,
	COLLECTIBLE_KNOCKOUT_DROPS = 637,
	COLLECTIBLE_ERASER = 638,
	COLLECTIBLE_YUCK_HEART = 639,
	COLLECTIBLE_URN_OF_SOULS = 640,
	COLLECTIBLE_AKELDAMA = 641,
	COLLECTIBLE_MAGIC_SKIN = 642,
	COLLECTIBLE_REVELATION = 643,
	COLLECTIBLE_CONSOLATION_PRIZE = 644,
	COLLECTIBLE_TINYTOMA = 645,
	COLLECTIBLE_BRIMSTONE_BOMBS = 646,
	COLLECTIBLE_4_5_VOLT = 647,
	// 648
	COLLECTIBLE_FRUITY_PLUM = 649,
	COLLECTIBLE_PLUM_FLUTE = 650,
	COLLECTIBLE_STAR_OF_BETHLEHEM = 651,
	COLLECTIBLE_CUBE_BABY = 652,
	COLLECTIBLE_VADE_RETRO = 653,
	COLLECTIBLE_FALSE_PHD = 654,
	COLLECTIBLE_SPIN_TO_WIN = 655,
	COLLECTIBLE_DAMOCLES_PASSIVE = 656,
	COLLECTIBLE_VASCULITIS = 657,
	COLLECTIBLE_GIANT_CELL = 658,
	COLLECTIBLE_TROPICAMIDE = 659,
	COLLECTIBLE_CARD_READING = 660,
	COLLECTIBLE_QUINTS = 661,
	// 662
	COLLECTIBLE_TOOTH_AND_NAIL = 663,
	COLLECTIBLE_BINGE_EATER = 664,
	COLLECTIBLE_GUPPYS_EYE = 665,
	// 666
	COLLECTIBLE_STRAW_MAN = 667,
	COLLECTIBLE_DADS_NOTE = 668,
	COLLECTIBLE_SAUSAGE = 669,
	COLLECTIBLE_OPTIONS = 670,
	COLLECTIBLE_CANDY_HEART = 671,
	COLLECTIBLE_POUND_OF_FLESH = 672,
	COLLECTIBLE_REDEMPTION = 673,
	COLLECTIBLE_SPIRIT_SHACKLES = 674,
	COLLECTIBLE_CRACKED_ORB = 675,
	COLLECTIBLE_EMPTY_HEART = 676,
	COLLECTIBLE_ASTRAL_PROJECTION = 677,
	COLLECTIBLE_C_SECTION = 678,
	COLLECTIBLE_LIL_ABADDON = 679,
	COLLECTIBLE_MONTEZUMAS_REVENGE = 680,
	COLLECTIBLE_LIL_PORTAL = 681,
	COLLECTIBLE_WORM_FRIEND = 682,
	COLLECTIBLE_BONE_SPURS = 683,
	COLLECTIBLE_HUNGRY_SOUL = 684,
	COLLECTIBLE_JAR_OF_WISPS = 685,
	COLLECTIBLE_SOUL_LOCKET = 686,
	COLLECTIBLE_FRIEND_FINDER = 687,
	COLLECTIBLE_INNER_CHILD = 688,
	COLLECTIBLE_GLITCHED_CROWN = 689,
	COLLECTIBLE_JELLY_BELLY = 690,
	COLLECTIBLE_SACRED_ORB = 691,
	COLLECTIBLE_SANGUINE_BOND = 692,
	COLLECTIBLE_SWARM = 693,
	COLLECTIBLE_HEARTBREAK = 694,
	COLLECTIBLE_BLOODY_GUST = 695,
	COLLECTIBLE_SALVATION = 696,
	COLLECTIBLE_VANISHING_TWIN = 697,
	COLLECTIBLE_TWISTED_PAIR = 698,
	COLLECTIBLE_AZAZELS_RAGE = 699,
	COLLECTIBLE_ECHO_CHAMBER = 700,
	COLLECTIBLE_ISAACS_TOMB = 701,
	COLLECTIBLE_VENGEFUL_SPIRIT = 702,
	COLLECTIBLE_ESAU_JR = 703,
	COLLECTIBLE_BERSERK = 704,
	COLLECTIBLE_DARK_ARTS = 705,
	COLLECTIBLE_ABYSS = 706,
	COLLECTIBLE_SUPPER = 707,
	COLLECTIBLE_STAPLER = 708,
	COLLECTIBLE_SUPLEX = 709,
	COLLECTIBLE_BAG_OF_CRAFTING = 710,
	COLLECTIBLE_FLIP = 711,
	COLLECTIBLE_LEMEGETON = 712,
	COLLECTIBLE_SUMPTORIUM = 713,
	COLLECTIBLE_RECALL = 714,
	COLLECTIBLE_HOLD = 715,
	COLLECTIBLE_KEEPERS_SACK = 716,
	COLLECTIBLE_KEEPERS_KIN = 717,
	// 718
	COLLECTIBLE_KEEPERS_BOX = 719,
	COLLECTIBLE_EVERYTHING_JAR = 720,
	COLLECTIBLE_TMTRAINER = 721,
	COLLECTIBLE_ANIMA_SOLA = 722,
	COLLECTIBLE_SPINDOWN_DICE = 723,
	COLLECTIBLE_HYPERCOAGULATION = 724,
	COLLECTIBLE_IBS = 725,
	COLLECTIBLE_HEMOPTYSIS = 726,
	COLLECTIBLE_GHOST_BOMBS = 727,
	COLLECTIBLE_GELLO = 728,
	COLLECTIBLE_DECAP_ATTACK = 729,
	COLLECTIBLE_GLASS_EYE = 730,
	COLLECTIBLE_STYE = 731,
	COLLECTIBLE_MOMS_RING = 732,
	
	NUM_COLLECTIBLES = 733
};
	
enum LevelStateFlag
{
	STATE_BUM_KILLED = 0,
	STATE_EVIL_BUM_KILLED = 1,
	STATE_REDHEART_DAMAGED = 2,
	STATE_BUM_LEFT = 3,
	STATE_EVIL_BUM_LEFT = 4,
	STATE_DAMAGED = 5,
	STATE_SHOPKEEPER_KILLED_LVL = 6,
	STATE_COMPASS_EFFECT = 7,
	STATE_MAP_EFFECT = 8,
	STATE_BLUE_MAP_EFFECT = 9,
	STATE_FULL_MAP_EFFECT = 10,
	STATE_GREED_LOST_PENALTY = 11,
	STATE_GREED_MONSTRO_SPAWNED = 12,
	STATE_ITEM_DUNGEON_FOUND = 13,
	STATE_MAMA_MEGA_USED = 14,
	//NUM_STATE_FLAGS = 15

	STATE_WOODEN_CROSS_REMOVED = 15,
	STATE_SHOVEL_QUEST_TRIGGERED = 16,
	STATE_SATANIC_BIBLE_USED = 17,
	STATE_SOL_EFFECT = 18,
	STATE_LEVEL_START_TRIGGERED = 19,
	STATE_LUNA_EFFECT = 20,
	STATE_VOID_DOOR_DISABLED = 21,
	STATE_MINESHAFT_ESCAPE = 22,
	STATE_MIRROR_BROKEN = 23,
	NUM_STATE_FLAGS = 24
};

enum TrinketType
{
	TRINKET_NULL = 0,
	TRINKET_SWALLOWED_PENNY = 1,
	TRINKET_PETRIFIED_POOP = 2,
	TRINKET_AAA_BATTERY = 3,
	TRINKET_BROKEN_REMOTE = 4,
	TRINKET_PURPLE_HEART = 5,
	TRINKET_BROKEN_MAGNET = 6,
	TRINKET_ROSARY_BEAD = 7,
	TRINKET_CARTRIDGE = 8,
	TRINKET_PULSE_WORM = 9,
	TRINKET_WIGGLE_WORM = 10,
	TRINKET_RING_WORM = 11,
	TRINKET_FLAT_WORM = 12,
	TRINKET_STORE_CREDIT = 13,
	TRINKET_CALLUS = 14,
	TRINKET_LUCKY_ROCK = 15,
	TRINKET_MOMS_TOENAIL = 16,
	TRINKET_BLACK_LIPSTICK = 17,
	TRINKET_BIBLE_TRACT = 18,
	TRINKET_PAPER_CLIP = 19,
	TRINKET_MONKEY_PAW = 20,
	TRINKET_MYSTERIOUS_PAPER = 21,
	TRINKET_DAEMONS_TAIL = 22,
	TRINKET_MISSING_POSTER = 23,
	TRINKET_BUTT_PENNY = 24,
	TRINKET_MYSTERIOUS_CANDY = 25,
	TRINKET_HOOK_WORM = 26,
	TRINKET_WHIP_WORM = 27,
	TRINKET_BROKEN_ANKH = 28,
	TRINKET_FISH_HEAD = 29,
	TRINKET_PINKY_EYE = 30,
	TRINKET_PUSH_PIN = 31,
	TRINKET_LIBERTY_CAP = 32,
	TRINKET_UMBILICAL_CORD = 33,
	TRINKET_CHILDS_HEART = 34,
	TRINKET_CURVED_HORN = 35,
	TRINKET_RUSTED_KEY = 36,
	TRINKET_GOAT_HOOF = 37,
	TRINKET_MOMS_PEARL = 38,
	TRINKET_CANCER = 39,
	TRINKET_RED_PATCH = 40,
	TRINKET_MATCH_STICK = 41,
	TRINKET_LUCKY_TOE = 42,
	TRINKET_CURSED_SKULL = 43,
	TRINKET_SAFETY_CAP = 44,
	TRINKET_ACE_SPADES = 45,
	TRINKET_ISAACS_FORK = 46,
	TRINKET_POLAROID_OBSOLETE = 47,
	TRINKET_MISSING_PAGE = 48,
	TRINKET_BLOODY_PENNY = 49,
	TRINKET_BURNT_PENNY = 50,
	TRINKET_FLAT_PENNY = 51,
	TRINKET_COUNTERFEIT_PENNY = 52,
	TRINKET_TICK = 53,
	TRINKET_ISAACS_HEAD = 54,
	TRINKET_MAGGYS_FAITH = 55,
	TRINKET_JUDAS_TONGUE = 56,
	TRINKET_SOUL = 57,
	TRINKET_SAMSONS_LOCK = 58,
	TRINKET_CAINS_EYE = 59,
	TRINKET_EVES_BIRD_FOOT = 60,
	TRINKET_LEFT_HAND = 61,
	TRINKET_SHINY_ROCK = 62,
	TRINKET_SAFETY_SCISSORS = 63,
	TRINKET_RAINBOW_WORM = 64,
	TRINKET_TAPE_WORM = 65,
	TRINKET_LAZY_WORM = 66,
	TRINKET_CRACKED_DICE = 67,
	TRINKET_SUPER_MAGNET = 68,
	TRINKET_FADED_POLAROID = 69,
	TRINKET_LOUSE = 70,
	TRINKET_BOBS_BLADDER = 71,
	TRINKET_WATCH_BATTERY = 72,
	TRINKET_BLASTING_CAP = 73,
	TRINKET_STUD_FINDER = 74,
	TRINKET_ERROR = 75,
	TRINKET_POKER_CHIP = 76,
	TRINKET_BLISTER = 77,
	TRINKET_SECOND_HAND = 78,
	TRINKET_ENDLESS_NAMELESS = 79,
	TRINKET_BLACK_FEATHER = 80,
	TRINKET_BLIND_RAGE = 81,
	TRINKET_GOLDEN_HORSE_SHOE = 82,
	TRINKET_STORE_KEY = 83,
	TRINKET_RIB_OF_GREED = 84,
	TRINKET_KARMA = 85,
	TRINKET_LIL_LARVA = 86,
	TRINKET_MOMS_LOCKET = 87,
	TRINKET_NO = 88,
	TRINKET_CHILD_LEASH = 89,
	TRINKET_BROWN_CAP = 90,
	TRINKET_MECONIUM = 91,
	TRINKET_CRACKED_CROWN = 92,
	TRINKET_USED_DIAPER = 93,
	TRINKET_FISH_TAIL = 94,
	TRINKET_BLACK_TOOTH = 95,
	TRINKET_OUROBOROS_WORM = 96,
	TRINKET_TONSIL = 97,
	TRINKET_NOSE_GOBLIN = 98,
	TRINKET_SUPER_BALL = 99,
	TRINKET_VIBRANT_BULB = 100,
	TRINKET_DIM_BULB = 101,
	TRINKET_FRAGMENTED_CARD = 102,
	TRINKET_EQUALITY = 103,
	TRINKET_WISH_BONE = 104,
	TRINKET_BAG_LUNCH = 105,
	TRINKET_LOST_CORK = 106,
	TRINKET_CROW_HEART = 107,
	TRINKET_WALNUT = 108,
	TRINKET_DUCT_TAPE = 109,
	TRINKET_SILVER_DOLLAR = 110,
	TRINKET_BLOODY_CROWN = 111,
	TRINKET_PAY_TO_WIN = 112,
	TRINKET_LOCUST_OF_WRATH = 113,
	TRINKET_LOCUST_OF_PESTILENCE = 114,
	TRINKET_LOCUST_OF_FAMINE = 115,
	TRINKET_LOCUST_OF_DEATH = 116,
	TRINKET_LOCUST_OF_CONQUEST = 117,
	TRINKET_BAT_WING = 118,
	TRINKET_STEM_CELL = 119,
	
	// Booster pack #1
	TRINKET_HAIRPIN = 120,
	TRINKET_WOODEN_CROSS = 121,
	TRINKET_BUTTER = 122,

	// Booster pack #2
	TRINKET_FILIGREE_FEATHERS = 123,
	
	// Booster pack #3
	TRINKET_DOOR_STOP = 124,
	
	// Booster pack #4
	TRINKET_EXTENSION_CORD = 125,
	
	// Booster pack #5
	TRINKET_ROTTEN_PENNY = 126,
	TRINKET_BABY_BENDER = 127,
	TRINKET_FINGER_BONE = 128,
	
	//NUM_TRINKETS = 129
	
	// Repentance
	TRINKET_JAW_BREAKER = 129,
	TRINKET_CHEWED_PEN = 130,
	TRINKET_BLESSED_PENNY = 131,
	TRINKET_BROKEN_SYRINGE = 132,
	TRINKET_SHORT_FUSE = 133,
	TRINKET_GIGANTE_BEAN = 134,
	TRINKET_LIGHTER = 135,
	TRINKET_BROKEN_PADLOCK = 136,
	TRINKET_MYOSOTIS = 137,
	TRINKET_M = 138,
	TRINKET_TEARDROP_CHARM = 139,
	TRINKET_APPLE_OF_SODOM = 140,
	TRINKET_FORGOTTEN_LULLABY = 141,
	TRINKET_BETHS_FAITH = 142,
	TRINKET_OLD_CAPACITOR = 143,
	TRINKET_BRAIN_WORM = 144,
	TRINKET_PERFECTION = 145,
	TRINKET_DEVILS_CROWN = 146,
	TRINKET_CHARGED_PENNY = 147,
	TRINKET_FRIENDSHIP_NECKLACE = 148,
	TRINKET_PANIC_BUTTON = 149,
	TRINKET_BLUE_KEY = 150,
	TRINKET_FLAT_FILE = 151,
	TRINKET_TELESCOPE_LENS = 152,
	TRINKET_MOMS_LOCK = 153,
	TRINKET_DICE_BAG = 154,
	TRINKET_HOLY_CROWN = 155,
	TRINKET_MOTHERS_KISS = 156,
	TRINKET_TORN_CARD = 157,
	TRINKET_TORN_POCKET = 158,
	TRINKET_GILDED_KEY = 159,
	TRINKET_LUCKY_SACK = 160,
	TRINKET_WICKED_CROWN = 161,
	TRINKET_AZAZELS_STUMP = 162,
	TRINKET_DINGLE_BERRY = 163,
	TRINKET_RING_CAP = 164,
	TRINKET_NUH_UH = 165,
	TRINKET_MODELING_CLAY = 166,
	TRINKET_POLISHED_BONE = 167,
	TRINKET_HOLLOW_HEART = 168,
	TRINKET_KIDS_DRAWING = 169,
	TRINKET_CRYSTAL_KEY = 170,
	TRINKET_KEEPERS_BARGAIN = 171,
	TRINKET_CURSED_PENNY = 172,
	TRINKET_YOUR_SOUL = 173,
	TRINKET_NUMBER_MAGNET = 174,
	TRINKET_STRANGE_KEY = 175,
	TRINKET_LIL_CLOT = 176,
	TRINKET_TEMPORARY_TATTOO = 177,
	TRINKET_SWALLOWED_M80 = 178,
	TRINKET_RC_REMOTE = 179,
	TRINKET_FOUND_SOUL = 180,
	TRINKET_EXPANSION_PACK = 181,
	TRINKET_BETHS_ESSENCE = 182,
	TRINKET_THE_TWINS = 183,
	TRINKET_ADOPTION_PAPERS = 184,
	TRINKET_CRICKET_LEG = 185,
	TRINKET_APOLLYONS_BEST_FRIEND = 186,
	TRINKET_BROKEN_GLASSES = 187,
	TRINKET_ICE_CUBE = 188,
	TRINKET_SIGIL_OF_BAPHOMET = 189,
	NUM_TRINKETS = 190,
	
	// Golden trinkets
	TRINKET_GOLDEN_FLAG = 0x8000,
	TRINKET_ID_MASK = 0x7fff
};

enum StageType
{
	STAGETYPE_ORIGINAL = 0,
	STAGETYPE_WOTL = 1,
	STAGETYPE_AFTERBIRTH = 2,
	STAGETYPE_GREEDMODE = 3, // deprecated, Greed Mode no longer has its own stages
	STAGETYPE_REPENTANCE = 4,
	STAGETYPE_REPENTANCE_B = 5,
};

enum LevelStage 
{
	STAGE_NULL = 0,
	STAGE1_1 = 1,
	STAGE1_2 = 2,
	STAGE2_1 = 3,
	STAGE2_2 = 4,
	STAGE3_1 = 5,
	STAGE3_2 = 6,
	STAGE4_1 = 7,
	STAGE4_2 = 8,
	STAGE4_3 = 9,
	STAGE5 = 10,
	STAGE6 = 11,
	STAGE7 = 12,
	STAGE8 = 13, // Home
	NUM_STAGES = 14,
	
	STAGE1_GREED = 1,
	STAGE2_GREED = 2,
	STAGE3_GREED = 3,
	STAGE4_GREED = 4,
	STAGE5_GREED = 5,
	STAGE6_GREED = 6,
	STAGE7_GREED = 7,
	
	NUM_BACKWARDS_STAGES = 7 // Save stages up to Mausoleum II for the Ascent (7 stages)
};

static DWORD GetBaseAddress()
{
	return (DWORD)GetModuleHandle(NULL);
}


struct Entity;
struct EntityList_EL;

struct EntityList_EL
{
	EntityList_EL(EntityList_EL *source) 
	{
		this->constructor(source);
	}
    
    EntityList_EL()
    {
    
    }

	LIBZHL_API void constructor(EntityList_EL *source);
	LIBZHL_API void Destroy();
	
	bool _sublist;
	Entity **_data;
	unsigned int _capacity;
	unsigned int _size;
};

struct Entity_NPC;
struct Vector;

struct Capsule;
struct EntityRef;

struct Vector
{
	Vector() : x(0.f), y(0.f) {}
	Vector(float _x, float _y) : x(_x), y(_y) {}
	
	Vector operator+(const Vector& other)
	{
		return Vector(x + other.x, y + other.y);
	}
	
	Vector operator-(const Vector& other)
	{		
		return Vector(x - other.x, y - other.y);
	}
	
	Vector operator/(float amount)
	{		
		return Vector(x / amount, y / amount);
	}
	
	Vector operator*(float amount)
	{		
		return Vector(x * amount, y * amount);
	}


	float x;
	float y;
};

struct NullFrame;
struct AnimationState;

struct AnimationState
{
	LIBZHL_API NullFrame *GetNullFrame(const char *nullLayerName);
	LIBZHL_API NullFrame *GetNullFrame(int nullLayerID);
	LIBZHL_API bool IsEventTriggered(const char *eventName);
	
};

struct LIBZHL_INTERFACE Entity
{
	inline unsigned int* GetType() { return (unsigned int*)((char*)this + 0x28); }
	inline unsigned int* GetVariant() { return (unsigned int*)((char*)this + 0x2c); }
	inline unsigned int* GetSubType() { return (unsigned int*)((char*)this + 0x30); }
	inline AnimationState* GetAnimationState() { return (AnimationState*)((char*)this + 0x6c); }
	inline AnimationState* GetOverlayAnimationState() { return (AnimationState*)((char*)this + 0x8c); }
	inline float* GetShadowSize() { return (float*)((char*)this + 0x150); }
	inline bool* GetVisible() { return (bool*)((char*)this + 0x169); }
	
	Entity() 
	{
		this->constructor();
	}

	virtual ~Entity() {}
	LIBZHL_API virtual void Init(unsigned int type, unsigned int variant, unsigned int subtype, unsigned int initSeed);
	virtual void PreUpdate() LIBZHL_PLACEHOLDER
	LIBZHL_API virtual void Update();
	LIBZHL_API void constructor();
	LIBZHL_API virtual bool TakeDamage(float Damage, unsigned __int64 DamageFlags, EntityRef *Source, int DamageCountdown);
	LIBZHL_API void CopyStatusEffects(Entity *target);
	LIBZHL_API void AddBleeding(const EntityRef &ref, int duration);
	LIBZHL_API void AddShrink(const EntityRef &ref, int duration);
	LIBZHL_API void AddMagnetized(const EntityRef &ref, int duration);
	LIBZHL_API void AddBaited(const EntityRef &ref, int duration);
	LIBZHL_API void AddBrimstoneMark(const EntityRef &ref, int duration);
	LIBZHL_API void AddWeakness(const EntityRef &ref, int duration);
	LIBZHL_API void AddIce(const EntityRef &ref, int duration);
	LIBZHL_API void AddKnockback(const EntityRef &ref, const Vector &unk1, int unk2, bool unk3);
	LIBZHL_API Vector GetNullOffset(const char *nullLayerName);
	LIBZHL_API Capsule *GetNullCapsule(const char *unk, const char *nullLayerName);
	LIBZHL_API bool RenderShadowLayer(Vector *offset);
	
	char pad0[28];
	unsigned int _index;
	unsigned int _collisionIndex;
	unsigned int _type;
	unsigned int _variant;
	unsigned int _subtype;
	unsigned int _shadowSize;
	bool _visible;
};

struct ColorMod
{
	float _tint[4];
	float _colorize[4];
	float _offset[3];
};

struct Entity_NPC : Entity
{
	inline ColorMod* GetDirtColor() { return (ColorMod*)((char*)this + 0xBFC); }

	LIBZHL_API void __stdcall Morph(int EntityType, int Variant, int SubType, int Championid);
	LIBZHL_API void Render(Vector *offset);
	LIBZHL_API void UpdateDirtColor(bool unk);
	
};

struct KColor
{
	float _red;
	float _green;
	float _blue;
	float _alpha;
};

struct Console;

struct IsaacString
{
    const char* Get() const {
        if (size < 16) {
            return text;
        } else {
            return *(char**)text;
        }
    }

	char text[16];
	uint32_t size;
	uint32_t unk;
};

struct Console_HistoryEntry
{
	IsaacString _text;
};

struct Entity_Player;
struct IsaacString;

struct Console
{
    inline int* GetState() { return (int*)((char*)this + 0x20); }
	
	inline std_deque_console_historyentry *GetHistory() { return (std_deque_console_historyentry*)((char*)this + 0x60); }

	LIBZHL_API void PrintError(const IsaacString &err);
	LIBZHL_API void RunCommand(const std::string &in, const std::string &out, Entity_Player *player);
	LIBZHL_API void Print(const IsaacString &text, unsigned int color, unsigned int unk);
	
};

struct GridEntityDesc;
struct RoomDescriptor;

struct EntityList;

struct EntityList
{
    inline EntityList_EL* GetUpdateEL() { return (EntityList_EL*)((char*)this + 0x40); }
    inline EntityList_EL* GetTempEL() { return (EntityList_EL*)((char*)this + 0x70); }
	inline EntityList_EL* GetWispEL() { return (EntityList_EL*)((char*)this + 0x90); }

	// This exists in the original source code as evidenced in the Switch decomp, but was inlined on PC.
	int CountWisps(int WispSubtype) {
	
		EntityList_EL* wisps = this->GetWispEL();
		unsigned int size = wisps->_size;
		unsigned int wispCount = 0;
		
		if (size) {
			Entity** data = wisps->_data;

			while (size) {
				Entity* wisp = *data;
				++data;
				if (wisp->_subtype == WispSubtype) // int WispSubtype
					wispCount++;
				--size;
			}
		}
		
		return wispCount;
	}

	LIBZHL_API void RenderShadows(Vector *offset);
	LIBZHL_API EntityList_EL *QueryType(EntityList_EL *result, int Type, int Variant, int Subtype, bool Cache, bool IgnoreFriendly);
	LIBZHL_API void QueryRadius(EntityList_EL *result, Vector *Position, float Radius, unsigned int Partitions);
	
};

struct Room;

struct Camera;

struct Camera
{
	Camera(Room* room)
	{
		this->constructor(room);
	}

	LIBZHL_API void constructor(Room *room);
	LIBZHL_API void SetFocusPosition(const Vector &pos);
	LIBZHL_API void DoUpdate(bool unk);
	LIBZHL_API void SnapToPosition(const Vector &pos);
	LIBZHL_API Vector *ClampedToRoom(Vector &pos);
	LIBZHL_API void UpdateDrag2();
	LIBZHL_API void UpdateUltrasmooth(bool unk);
	
};

struct ItemConfig_Item;

struct TemporaryEffect
{
	ItemConfig_Item *_item;
	int _unk;
	int _unk2;
};

struct TemporaryEffects
{
	int _unk;
	std::vector<TemporaryEffect> _effects;
	int _unk2;
	int _disabled;
	Entity_Player *_player;
};

struct GridEntity;

struct Room
{
	inline Camera* GetCamera() { return *(Camera**)((char*)this + 0x11F8); }
	inline bool GetRedHeartDamage() {return *(bool**)((char*)this + 0x120C); }
	inline EntityList* GetEntityList() {return (EntityList*)((char*)this + 0x1218); }
	inline TemporaryEffects* GetTemporaryEffects() {return (TemporaryEffects*)((char*)this + 0x71F4); }

	LIBZHL_API float GetDevilRoomChance();
	LIBZHL_API GridEntity *GetGridEntity(uint32_t idx);
	LIBZHL_API void ShopRestockFull();
	LIBZHL_API void ShopRestockPartial();
	LIBZHL_API int GetShopItemPrice(unsigned int entVariant, unsigned int entSubType, int shopItemID);
	LIBZHL_API bool SpawnGridEntity(int GridIndex, unsigned int Type, unsigned int Variant, unsigned int Seed, int VarData);
	LIBZHL_API bool SpawnGridEntity(int GridIndex, GridEntityDesc *Desc);
	LIBZHL_API void RemoveGridEntityImmediate(int GridIndex, int PathTrail, bool KeepDecoration);
	LIBZHL_API void TriggerClear(bool playSound);
	LIBZHL_API bool CanSpawnObstacleAtPosition(int GridIndex, bool Force);
	
	char pad0[4];
	RoomDescriptor *_descriptor;
	char pad1[28];
	GridEntity *_gridEntities[447];
	char pad2[4];
	GridEntity *_doors[8];
	uint32_t _doorGridPositions[8];
	Camera *_Camera;
	bool _redHeartDamage;
	EntityList _entityList;
	TemporaryEffects _temporaryEffects;
};

struct GridEntityDesc
{
	int _type;
	int _variant;
	int _state;
	int _spawnCount;
	unsigned int _spawnSeed;
	int _varData;
	bool _initialized;
	unsigned int _variableSeed;
};

struct CompletionWidget;

struct ANM2;
struct LayerState;

struct ANM2
{
	inline AnimationState* GetAnimationState() {return (AnimationState*)((char*)this + 48); }
	inline NullFrame* GetNullFrame(char * name) {return this->GetAnimationState()->GetNullFrame(name); }

	LIBZHL_API void Render(Vector *position, Vector *topleftclamp, Vector *bottomrightclamp);
	LIBZHL_API void Update();
	LIBZHL_API void SetLayerFrame(int layerid, int frame);
	LIBZHL_API void ReplaceSpritesheet(int LayerId, IsaacString &PngFilename);
	LIBZHL_API void LoadGraphics(bool unk);
	LIBZHL_API LayerState *GetLayer(const char *layerName);
	LIBZHL_API LayerState *GetLayer(int layer);
	LIBZHL_API void RenderLayer(int param_1, Vector *param_2, Vector *param_3, Vector *param_4);
	
	IsaacString _filename;
};

struct CompletionWidget
{
	inline ANM2* GetANM2() { return (ANM2*)((char*)this + 4); } 

	LIBZHL_API void Render(Vector *pos, Vector *scale);
	LIBZHL_API void Update();
	
	int CharacterId;
};

struct Menu_Character
{
	inline CompletionWidget* GetCompletionWidget() { return (CompletionWidget*)((char*)this + 1168); } 

	LIBZHL_API void __stdcall Update();
	LIBZHL_API void __stdcall Render();
	LIBZHL_API void __stdcall Init(Vector *unk);
	
	int status;
	int lockedflags;
	int difficulty;
	int unk4;
	int charaslot;
	float unk5;
	float unk6;
	int unk7;
	int unk8;
};

struct GridEntity_Rock;

struct LIBZHL_INTERFACE GridEntity
{
	inline GridCollisionClass* GetCollisionClass() { return (GridCollisionClass*)((char*)this + 0x3C); }
	inline unsigned int* GetGridIndex() { return (unsigned int*)((char*)this + 0x24); }

	LIBZHL_API void Init(unsigned int Seed);
	
	int _unk;
	GridEntityType _type;
	int _variant;
	int _state;
	int _unk2;
	int _varData;
	int _unk3;
	unsigned int _collisionClass;
};

struct GridEntity_Rock : GridEntity
{
	LIBZHL_API void Update();
	LIBZHL_API bool Destroy(bool Immediate);
	
};

struct NPCAI_Pathfinder
{
};

struct LuaEngine;
struct RunCallbackRegistry;

struct LuaEngine
{
	LIBZHL_API void Init(bool Debug);
	LIBZHL_API void RegisterClasses();
	LIBZHL_API bool RunBundledScript(const char *path);
	
	char pad0[16];
	RunCallbackRegistry *runCallbackRegistry;
	char pad1[4];
	lua_State *_state;
	int32_t _runCallbackRegistryKey;
};

struct RNG;
struct BossPool;

struct BossPool
{
	LIBZHL_API int GetBossId(int leveltype, int levelvariant, RNG *rng);
	
};

struct RoomConfig;

struct RoomConfigs
{
	uint32_t stageId;
	IsaacString stageName;
	IsaacString playerSpot;
	IsaacString bossSpot;
	IsaacString suffix;
	IsaacString xmlFileName;
	RoomConfig *configs;
	uint32_t nbRooms;
	void *unk1;
	uint32_t unk2;
	uint8_t unk3;
	char unk4[3];
	IsaacString greedModeXmlFileName;
	char unk5[8];
	void *unk6;
	char unk7[8];
	uint32_t music;
	uint32_t backdrop;
};

struct Entity_Knife;

struct Entity_Knife : Entity
{
	LIBZHL_API void Render(Vector *offset);
	
};

struct Weapon_MultiShotParams
{
	int16_t numTears;
	int16_t unk1;
	float unk2;
	float unk3;
	float unk4;
	float unk5;
	int32_t unk6;
	float unk7;
	bool unk8;
	bool unk9;
	bool unk10;
	char pad0;
	int16_t unk11;
	char pad1[2];
};

struct Ambush;

struct Ambush
{
	LIBZHL_API void StartChallenge();
	
};

struct HUD;

struct HUD
{
	LIBZHL_API void Render();
	LIBZHL_API void Update();
	LIBZHL_API void PostUpdate();
	LIBZHL_API void LoadGraphics();
	
};

struct PlayerHUD;

struct PlayerHUD : HUD
{
	LIBZHL_API void Update();
	LIBZHL_API void RenderActiveItem(unsigned int slot, const Vector &pos, float alpha, float unk4);
	
};

struct Entity_Slot;

struct Entity_Slot : Entity
{
	LIBZHL_API void Render(Vector *offset);
	LIBZHL_API virtual void Update();
	LIBZHL_API void CreateDropsFromExplosion();
	LIBZHL_API void SetPrizeCollectible(int CollectibleType);
	LIBZHL_API virtual void Init(int Type, int Variant, int SubType, int Seed);
	LIBZHL_API virtual bool HandleCollision(Entity *Collider, bool Low);
	
};

struct LayerState
{
	inline Vector* GetSize() {return (Vector*)((char*)this + 0x34); }
	//inline float* GetUnk1() { return (float*)((char*)this + 0x34); }
	//inline float* GetUnk2() { return (float*)((char*)this + 0x38); }
	inline bool* IsVisible() { return (bool*)((char*)this + 0x74); }
	inline float* GetCropYOffset() { return (float*)((char*)this + 0x90); }

	char pad[116];
	bool _something;
};

struct PosVel
{
	PosVel() : pos(Vector()), vel(Vector()) {}
	PosVel(Vector _pos, Vector _vel) : pos(_pos), vel(_vel) {}

	PosVel operator+(const PosVel& other)
	{
		return PosVel(pos + other.pos, vel + other.vel);
	}
	
	PosVel operator-(const PosVel& other)
	{		
		return PosVel(pos - other.pos, vel - other.vel);
	}
	
	PosVel operator/(float amount)
	{		
		return PosVel(pos / amount, vel / amount);
	}
	
	PosVel operator*(float amount)
	{		
		return PosVel(pos * amount, vel * amount);
	}


	Vector pos;
	Vector vel;
};

struct LIBZHL_INTERFACE Entity_Player : Entity
{
	inline int GetPlayerType() { return *(int*)((char*)this + 0x130c); }
	inline Entity** GetHeldEntity() { return (Entity**)((char*)this + 0x1358); }

	virtual ~Entity_Player() {}
	LIBZHL_API virtual void Init(unsigned int type, unsigned int variant, unsigned int subtype, unsigned int initSeed);
	virtual void PreUpdate() LIBZHL_PLACEHOLDER
	LIBZHL_API virtual void Update();
	LIBZHL_API void AddCollectible(int type, int charge, bool firsttime, int slot, int vardata);
	LIBZHL_API void AddBrokenHearts(int amount);
	LIBZHL_API void AddBombs(int amount);
	LIBZHL_API void AddKeys(int amount);
	LIBZHL_API void AddJarHearts(int amount);
	LIBZHL_API void AddJarFlies(int amount);
	LIBZHL_API void AddPrettyFly();
	LIBZHL_API void AddCoins(int amount);
	LIBZHL_API static PosVel __cdecl GetMultiShotPositionVelocity(int loopIndex, WeaponType weaponType, Vector shotDirection, float shotSpeed, Weapon_MultiShotParams multiShotParams);
	LIBZHL_API Weapon_MultiShotParams GetMultiShotParams(WeaponType weaponType);
	LIBZHL_API Entity_Player *InitTwin(int playerType);
	LIBZHL_API virtual bool TakeDamage(float Damage, unsigned __int64 DamageFlags, EntityRef *Source, int DamageCountdown);
	LIBZHL_API Entity *ThrowHeldEntity(Vector *Velocity);
	LIBZHL_API void InitPostLevelInitStats();
	LIBZHL_API void TriggerRoomExit(bool unk);
	LIBZHL_API bool TriggerDeath(bool checkOnly);
	LIBZHL_API void Revive();
	LIBZHL_API void SetItemState(CollectibleType collectible);
	LIBZHL_API void UseCard(int cardType, unsigned int useFlag);
	LIBZHL_API void UsePill(int ePillEffect, int ePillColor, unsigned int useFlag);
	LIBZHL_API void Render(Vector *offset);
	LIBZHL_API int GetHealthType();
	LIBZHL_API void RenderHead(Vector *position);
	LIBZHL_API void RenderBody(Vector *position);
	LIBZHL_API void TriggerRoomClear();
	LIBZHL_API bool CanUseCollectible(CollectibleType collectible, int slot);
	LIBZHL_API bool HasCollectible(CollectibleType type, bool ignoreModifiers);
	LIBZHL_API int GetCollectibleCount();
	LIBZHL_API void EvaluateItems();
	LIBZHL_API void AddCacheFlags(int flags);
	LIBZHL_API int GetActiveItem(int slot);
	LIBZHL_API int GetTotalActiveCharge(int slot);
	LIBZHL_API int GetActiveMaxCharge(int collectible, int vardata);
	LIBZHL_API int GetActiveMinUsableCharge(int slot);
	LIBZHL_API void SetActiveVarData(int vardata, int slot);
	LIBZHL_API int AddActiveCharge(unsigned int charge, int slot, bool unk, bool overcharge, bool force);
	LIBZHL_API int DropCollectible(int collectible, int param2, bool param3);
	LIBZHL_API int GetHealthLimit(bool keeper);
	LIBZHL_API void IncrementPlayerFormCounter(int ePlayerForm, int num);
	LIBZHL_API void TriggerNewRoom_TemporaryEffects();
	LIBZHL_API void TriggerNewStage(bool unk);
	
};

struct DrawStringEntry
{
	const char *_text;
	float _x;
	float _y;
	KColor _color;
	int _boxWidth;
	bool _center;
};

struct StaticArray
{
	void *data;
	uint16_t size;
};

struct RoomSpawn
{
	uint16_t X;
	uint16_t Y;
	StaticArray Entries;
	char pad[2];
	float SumWeights;
};

struct Globals
{
};

struct Entity_Projectile;

struct Entity_Projectile : Entity
{
	LIBZHL_API void Render(Vector *offset);
	
};

struct ModManager
{
	LIBZHL_API static void __stdcall RenderCustomCharacterMenu(int CharacterId, Vector *RenderPos, ANM2 *DefaultSprite);
	
};

struct RoomDescriptor
{
	int32_t GridIndex;
	int32_t SafeGridIndex;
	int32_t ListIndex;
	int32_t unk0;
	RoomConfig *Data;
	RoomConfig *OverrideData;
	int32_t AllowedDoors;
	int32_t Doors[8];
	int32_t DisplayFlags;
	int32_t VisitedCount;
	int32_t Flags;
	int16_t unk9;
	int16_t ClearCount;
	int32_t unk10;
	int32_t PoopCount;
	int32_t PitsCount;
	int32_t DecorationSeed;
	int32_t SpawnSeed;
	int32_t AwardSeed;
	int32_t unk11;
	int32_t unk12;
	int32_t unk13;
	int32_t unk14;
	int32_t unk15;
	int32_t unk16;
	int32_t unk17;
	int32_t unk18;
	int32_t unk19;
	int32_t unk20;
	int32_t unk21;
	int32_t unk22;
	int32_t unk23;
	int32_t unk24;
	int32_t unk25;
	int32_t unk26;
	int32_t unk27;
	int32_t unk28;
	int16_t ShopItemIdx;
	int16_t ShopItemDiscountIdx;
	int32_t DeliriumDistance;
	int32_t unk29;
};

struct Entity_Tear;

struct Entity_Tear : Entity
{
	LIBZHL_API void Render(Vector *offset);
	
};

struct ChallengeParam
{
	IsaacString _name;
	std_set_int _roomset;
};

struct Capsule
{
};

struct RoomEntry
{
	uint32_t type;
	uint16_t variant;
	uint16_t subtype;
	float weight;
};

struct RoomConfigHolder;

struct RoomConfigHolder
{
	LIBZHL_API RoomConfig *GetRoomByStageTypeAndVariant(uint32_t stage, uint32_t type, uint32_t variant, int32_t difficulty);
	LIBZHL_API RoomConfig *GetRandomRoom(unsigned int seed, bool reduceWeight, int stage, int roomType, int roomShape, unsigned int unk1, unsigned int unk2, int minDifficulty, int maxDifficulty, const unsigned int &requiredDoors, unsigned int roomSubtype, int unk3);
	
	RoomConfigs configs[36];
};

struct Menu_Title;

struct Menu_Title
{
	LIBZHL_API void Update();
	LIBZHL_API void Render();
	
};

struct ItemConfig_Item
{
	int _type;
	int _id;
};

struct Entity_Pickup;

struct Entity_Pickup : Entity
{
	inline bool IsBlind() { return *(bool*)((char*)this + 0x47e); }

	LIBZHL_API void __stdcall Morph(int EntityType, int Variant, int SubType, bool KeepPrice, bool KeepSeed, bool IgnoreModifiers);
	LIBZHL_API void TriggerShopPurchase(Entity_Player *player, int spentMoney);
	LIBZHL_API void Render(Vector *offset);
	LIBZHL_API void SetAlternatePedestal(int pedestalType);
	LIBZHL_API bool TryRemoveCollectible();
	LIBZHL_API void SetForceBlind(bool setBlind);
	
};

struct Level;

struct Level
{
	LIBZHL_API void __stdcall SetStage(int stageid, int alt);
	LIBZHL_API void __stdcall Init();
	LIBZHL_API void ChangeRoom(int targetRoomIDX, int dimension);
	LIBZHL_API bool TryInitializeExtraBossRoom(unsigned int seed);
	
};

struct DrawStringScaledEntry
{
	const char *_text;
	float _x;
	float _y;
	float _scaleX;
	float _scaleY;
	KColor _color;
	int _boxWidth;
	bool _center;
};

struct Font;

struct Font
{


	LIBZHL_API void DrawString(DrawStringEntry entry);
	LIBZHL_API void DrawStringUTF8(DrawStringEntry entry);
	LIBZHL_API void DrawStringScaled(DrawStringScaledEntry entry);
	LIBZHL_API void DrawStringScaledUTF8(DrawStringScaledEntry entry);
	LIBZHL_API int GetStringWidth(const char *str);
	LIBZHL_API int GetStringWidthUTF8(const char *str);
	
};

struct StringTable;

struct StringTable
{
	LIBZHL_API char *GetString(const char *category, int language, const char *key, void *unk);
	
	uint32_t language;
};

struct Entity_Effect;

struct Entity_Effect : Entity
{
	LIBZHL_API void Render(Vector *offset);
	
};

struct ItemOverlay;

struct ItemOverlay
{
	//inline ANM2* GetSprite() { return (ANM2*)((char*)this + 0x114c); } 

	LIBZHL_API void Show(int eOverlayID, int unk, Entity_Player *player);
	LIBZHL_API void Update(bool unk);
	
};

struct ProceduralItemManager;

struct ProceduralItemManager
{
	LIBZHL_API int CreateProceduralItem(unsigned int seed, unsigned int unk);
	
};

struct RNG
{
	LIBZHL_API void SetSeed(unsigned int Seed, unsigned int ShiftIdx);
	
	unsigned int _seed;
	char pad0[12];
};

struct LevelGenerator_Room
{
	char pad0[8];
	uint32_t _gridColIdx;
	uint32_t _gridLineIdx;
	char pad1[12];
	uint32_t _doors;
};

struct Isaac
{
	LIBZHL_API static GridEntity *__stdcall CreateGridEntity(int Type, unsigned int Index);
	LIBZHL_API static int __stdcall Random(int Max);
	LIBZHL_API static const char *__stdcall GetString(StringTable *table, const char *key);
	LIBZHL_API static void *__cdecl GetRoomEntities(void *unk);
	LIBZHL_API static void __cdecl free(void *block);
	
};

struct SFXManager;

struct SFXManager
{
	LIBZHL_API void Play(int ID, float Volume, int FrameDelay, bool Loop, float Pitch, float Pan);
	
};

struct NullFrame
{
	inline Vector* GetPos() {return (Vector*)((char*)this); }
	inline Vector* GetScale() {return (Vector*)((char*)this + 0x10); }

};

struct Minimap;

struct Minimap
{
	LIBZHL_API void Render();
	
};

struct LevelGenerator;
struct LevelGenerator_Room;

struct LevelGenerator
{
	inline int* GetNumBossRooms() { return (int*)((char*)this + 0x38C); }

	LIBZHL_API int PlaceRoom(LevelGenerator_Room *room);
	LIBZHL_API LevelGenerator_Room *CreateRoom(int x, int y, int shape, int connectX, int connectY, Direction connectDir);
	LIBZHL_API void Generate(int unk, bool unk2, bool unk3, bool unk4, const unsigned int &allowedShapes, int unk5, LevelGenerator_Room *startRoom);
	LIBZHL_API LevelGenerator_Room *GetNewEndRoom(int roomShape, const unsigned int &possibleDoors);
	LIBZHL_API void __stdcall DetermineBossRoom(int shape, const unsigned int &possibleDoors);
	
};

struct Menu_Game;

struct Menu_Game
{
	inline ANM2* GetContinueWidgetSprite() { return (ANM2*)((char*)this + 0x124) ; }
	inline AnimationState* GetContinueWidgetAnimationState() { return (AnimationState*)((char*)this + 0x154) ; }

	LIBZHL_API void Update();
	LIBZHL_API void PreRenderContinueImg();
	
};

struct MenuManager;

struct MenuManager
{
	MenuManager()
	{
		this->constructor();
	}

	LIBZHL_API void constructor();
	LIBZHL_API void __stdcall Init();
	LIBZHL_API void __stdcall Render();
	LIBZHL_API void __stdcall SetState(int estate);
	
};

struct EntityRef
{
	int _type;
	int _variant;
	int _spawnerType;
	unsigned int _spawnerVariant;
	Vector _position;
	Vector _velocity;
	unsigned int _flags;
	Entity *_entity;
};

struct Entity_Familiar;

struct Entity_Familiar : Entity
{
	inline NPCAI_Pathfinder* GetPathFinder() {return (NPCAI_Pathfinder*)((char*)this + 0x54c); }

	LIBZHL_API int GetFollowerPriority();
	LIBZHL_API void Render(Vector *offset);
	
};

struct PersistentGameData;

struct PersistentGameData
{
	inline int GetEventCounter(int eventCounter) {return *(int*)((char*)this + eventCounter * 4 + 0x2b8); }
	inline bool IsItemInCollection (int collectibleID) {
		int savedata = *(int*)((char*)this + collectibleID * 0x1 + 0xa78);
		printf("savedata %d\n", savedata);
		return savedata != 0; 
	}

	LIBZHL_API bool TryUnlock(int achievementID);
	LIBZHL_API void IncreaseEventCounter(int eEventCounters, int num);
	LIBZHL_API bool Unlocked(int achievementID);
	LIBZHL_API void AddToCollection(int collectibleID);
	
};

struct PlayerManager;

struct PlayerManager
{
	LIBZHL_API Entity_Player *SpawnCoPlayer(int unk);
	LIBZHL_API Entity_Player *SpawnCoPlayer2(int unk);
	LIBZHL_API Entity_Player *FirstCollectibleOwner(CollectibleType collectibleID, RNG **rng, bool unk);
	LIBZHL_API bool IsCoopPlay();
	LIBZHL_API int GetNumCollectibles(CollectibleType type);
	LIBZHL_API Entity_Player *FirstTrinketOwner(TrinketType trinketType, RNG **rng, bool unk);
	LIBZHL_API bool HasTemporaryEffect(ItemConfig_Item *item);
	
	RNG _rng;
};

struct DailyChallenge
{
	unsigned int _id;
	unsigned int _seed;
};

struct Game;

struct Game
{
	Game()
	{
		this->constructor();
	}
    
    uint32_t GetNbRooms() const 
    { 
        return *(uint32_t*)((char*)this + 0x1815C); 
    }
    
	inline Console* GetConsole() { return (Console*)((char*)this + 0x1BB60); } // Cast to appropriate type
	
	inline ItemOverlay* GetItemOverlay() { return (ItemOverlay*)((char*)this + 0x1BCC0) ; }
	
	inline Ambush* GetAmbush() { return (Ambush*)((char*)this + 0x1c31b8); }
	
	inline Room** GetCurrentRoom() { return (Room**)((char*)this + 0x18190); }
		
	inline int GetCurrentRoomIdx() {return *(int*)((char*)this + 0x18194); }

	inline int GetLastBossRoomListIdx() {return *(int*)((char*)this + 0x181A4); }
	
	inline int GetGreedModeWave() { return *(int*)((char*)this + 0x181C4); }
	
	inline const unsigned int* GetLevelStateFlags() { return (const unsigned int*)((char*)this + 0x1822C); }
		
	inline PlayerManager* GetPlayerManager() { return (PlayerManager*)((char*)this + 0x1BA40); }
	
	inline int GetLastDevilRoomStage() { return *(int*)((char*)this + 0x1C3174); }
	
	inline int GetLastLevelWithDamage() { return *(int*)((char*)this + 0x243628); }
	
	inline int GetLastLevelWithoutHalfHp() { return *(int*)((char*)this + 0x24361c); }

	inline int GetTreasureRoomsVisited() { return *(int*)((char*)this + 0x1C3178); }
	
	inline int GetPlanetariumsVisited() { return *(int*)((char*)this + 0x1C317C); }
	
	inline DailyChallenge GetDailyChallenge() { return *(DailyChallenge*)((char*)this + 0x1C3204); }
	
	inline unsigned int GetChallenge() { return *(unsigned int*)((char*)this + 0x1C319C); }
	
	inline unsigned int GetDebugFlags() { return *(unsigned int*)((char*)this + 0X1C3164); }
	
	inline int GetDifficulty() {return *(int*)((char*) this + 0x243624); }
	
    RoomDescriptor* GetRoomDescriptorsForDimension(uint32_t dimension) 
    { 
        return (RoomDescriptor*)((char*)this + 0x14 + dimension * sizeof(RoomDescriptor) * 169); 
    }

	LIBZHL_API void constructor();
	LIBZHL_API bool IsPaused();
	LIBZHL_API bool IsHardMode();
	LIBZHL_API Entity *Spawn(unsigned int type, unsigned int variant, const Vector &position, const Vector &velocity, Entity *spawner, unsigned int subtype, unsigned int seed, unsigned int unk);
	LIBZHL_API void ShakeScreen(int timeout);
	LIBZHL_API void MakeShockwave(const Vector &pos, float amplitude, float speed, int duration);
	LIBZHL_API Entity_Player *GetPlayer(unsigned int Index);
	LIBZHL_API void Update();
	LIBZHL_API bool AchievementUnlocksDisallowed();
	LIBZHL_API bool PlaceRoom(LevelGenerator_Room *room, RoomConfig *data, unsigned int Seed, int dimension);
	LIBZHL_API void UpdateVisibility();
	LIBZHL_API uint32_t *GetRoomDescriptorsOffsetsArrayForDimension(uint32_t dimension);
	LIBZHL_API RoomDescriptor *GetRoomByIdx(uint32_t idx, int32_t dimension);
	LIBZHL_API float GetPlanetariumChance();
	LIBZHL_API void __stdcall StartStageTransition(bool SameStage, int param_2, Entity_Player *param_3);
	LIBZHL_API void Render();
	LIBZHL_API void ToggleDebugFlag(unsigned int debug);
	LIBZHL_API bool GetDebugFlag(unsigned int debug);
	
	uint32_t _stage;
	uint32_t _stageType;
	bool _bossChallenge;
	bool _devilRoomDisabled;
	char _pad0[2];
	uint32_t _curses;
	RoomDescriptor _gridRooms[507];
	RoomDescriptor _negativeGridRooms[18];
	uint32_t _roomOffset[507];
	uint32_t _nbRooms;
	uint32_t _startingRoomIdx;
	Room *_room;
	uint32_t _currentRoomIdx;
	uint32_t _lastRoomIdx;
	uint32_t _currentDimensionIdx;
	uint32_t _lastRoomDimensionIdx;
	uint32_t _lastBossRoomListIdx;
	uint32_t _leaveDoor;
	uint32_t _enterDoor;
	uint32_t _greedModeWave;
	unsigned int _stateFlags;
	uint32_t _greedModeTreasureRoomIdx;
	RoomConfigHolder _roomConfigs;
	PlayerManager _playerManager;
	Console _console;
	ItemOverlay _itemOverlay;
	int _treasureRoomsVisited;
	int _planetariumsVisited;
	Ambush _ambush;
	uint32_t _difficulty;
	ProceduralItemManager _proceduralItemManager;
};

struct RoomConfig
{
	int32_t StageId;
	int32_t Mode;
	int32_t Type;
	int32_t Variant;
	int32_t Subtype;
	IsaacString Name;
	int32_t Difficulty;
	float InitialWeight;
	float Weight;
	int32_t Doors;
	int32_t unk7;
	StaticArray Spawns;
	int8_t Width;
	int8_t Height;
	int32_t Shape;
	int32_t unk9;
	int32_t unk10;
	int32_t unk11;
	int32_t unk12;
};

struct Entity_Bomb;

struct Entity_Bomb : Entity
{
	LIBZHL_API void Render(Vector *offset);
	
};

struct PauseScreen;

struct PauseScreen
{
	inline CompletionWidget* GetCompletionWidget() { return (CompletionWidget*)((char*)this + 526620); } 
	inline ANM2* GetANM2() { return (ANM2*)((char*)this + 44); }
	//inline ANM2* GetANM22() { return (ANM2*)((char*)this + 92); } // ?? another sprite, it can be rendered but I suspect its the same one loaded at a different offset?
	inline ANM2* GetStatsANM2() { return (ANM2*)((char*)this + 368); }	

	LIBZHL_API void Render();
	
};

struct ChallengeParam;
struct Manager;

struct Manager
{
	inline StringTable* GetStringTable() { return (StringTable*)((char*)this + 0x4a234); }

	LIBZHL_API void __stdcall Update();
	LIBZHL_API void __stdcall RecordPlayerCompletion(int eCompletionEvent);
	LIBZHL_API ChallengeParam *GetChallengeParams(int challengeID);
	
	char unk1[19];
	PersistentGameData _persistentGameData;
	StringTable _stringTable;
};

struct Music;

struct Music
{
	inline void StopJingle() {
		*(int*)((char*)this + 0x348) = 0;
		*(int*)((char*)this + 0x364) = -99;
	};

	LIBZHL_API void Play(int musicid, float volume);
	LIBZHL_API void Crossfade(int musicid, float faderate);
	LIBZHL_API void PlayJingle(int musicid);
	LIBZHL_API void DisableLayer(int id);
	LIBZHL_API void EnableLayer(int id, bool instant);
	
};

struct RunCallbackRegistry
{
	lua_State *state;
	int32_t key;
};

LIBZHL_API GridEntity *__stdcall CreateGridEntity(GridEntityType type, unsigned int seed);
LIBZHL_API unsigned int __stdcall Random();

extern LIBZHL_API float *__ptr_g_WIDTH;
#define g_WIDTH (*__ptr_g_WIDTH)
extern LIBZHL_API float *__ptr_g_HEIGHT;
#define g_HEIGHT (*__ptr_g_HEIGHT)
extern LIBZHL_API int **__ptr_g_SomethingRelatedToCharas;
#define g_SomethingRelatedToCharas (*__ptr_g_SomethingRelatedToCharas)
extern LIBZHL_API Game **__ptr_g_Game;
#define g_Game (*__ptr_g_Game)
extern LIBZHL_API LuaEngine **__ptr_g_LuaEngine;
#define g_LuaEngine (*__ptr_g_LuaEngine)
extern LIBZHL_API Manager **__ptr_g_Manager;
#define g_Manager (*__ptr_g_Manager)
extern LIBZHL_API MenuManager **__ptr_g_MenuManager;
#define g_MenuManager (*__ptr_g_MenuManager)


